
Hello World SML.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d74  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002f08  08002f08  00012f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f2c  08002f2c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002f2c  08002f2c  00012f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f34  08002f34  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08002f34  08002f34  00012f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f3c  08002f3c  00012f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002f40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08002f4c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08002f4c  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d185  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001aa1  00000000  00000000  0002d1c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c20  00000000  00000000  0002ec68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b78  00000000  00000000  0002f888  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016a3c  00000000  00000000  00030400  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006a83  00000000  00000000  00046e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009a38e  00000000  00000000  0004d8bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e7c4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033fc  00000000  00000000  000e7cc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002ef0 	.word	0x08002ef0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002ef0 	.word	0x08002ef0

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b972 	b.w	80004d0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	4688      	mov	r8, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14b      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000212:	428a      	cmp	r2, r1
 8000214:	4615      	mov	r5, r2
 8000216:	d967      	bls.n	80002e8 <__udivmoddi4+0xe4>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0720 	rsb	r7, r2, #32
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	fa20 f707 	lsr.w	r7, r0, r7
 800022a:	4095      	lsls	r5, r2
 800022c:	ea47 0803 	orr.w	r8, r7, r3
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbb8 f7fe 	udiv	r7, r8, lr
 800023c:	fa1f fc85 	uxth.w	ip, r5
 8000240:	fb0e 8817 	mls	r8, lr, r7, r8
 8000244:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000248:	fb07 f10c 	mul.w	r1, r7, ip
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18eb      	adds	r3, r5, r3
 8000252:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000256:	f080 811b 	bcs.w	8000490 <__udivmoddi4+0x28c>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8118 	bls.w	8000490 <__udivmoddi4+0x28c>
 8000260:	3f02      	subs	r7, #2
 8000262:	442b      	add	r3, r5
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0fe 	udiv	r0, r3, lr
 800026c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fc0c 	mul.w	ip, r0, ip
 8000278:	45a4      	cmp	ip, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	192c      	adds	r4, r5, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x290>
 8000286:	45a4      	cmp	ip, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x290>
 800028c:	3802      	subs	r0, #2
 800028e:	442c      	add	r4, r5
 8000290:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000294:	eba4 040c 	sub.w	r4, r4, ip
 8000298:	2700      	movs	r7, #0
 800029a:	b11e      	cbz	r6, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c6 4300 	strd	r4, r3, [r6]
 80002a4:	4639      	mov	r1, r7
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xbe>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80eb 	beq.w	800048a <__udivmoddi4+0x286>
 80002b4:	2700      	movs	r7, #0
 80002b6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ba:	4638      	mov	r0, r7
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f783 	clz	r7, r3
 80002c6:	2f00      	cmp	r7, #0
 80002c8:	d147      	bne.n	800035a <__udivmoddi4+0x156>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd0>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2c4>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	4698      	mov	r8, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa0>
 80002e2:	e9c6 4800 	strd	r4, r8, [r6]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa0>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xe8>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 808f 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f6:	1b49      	subs	r1, r1, r5
 80002f8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002fc:	fa1f f885 	uxth.w	r8, r5
 8000300:	2701      	movs	r7, #1
 8000302:	fbb1 fcfe 	udiv	ip, r1, lr
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fb0e 111c 	mls	r1, lr, ip, r1
 800030c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000310:	fb08 f10c 	mul.w	r1, r8, ip
 8000314:	4299      	cmp	r1, r3
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x124>
 8000318:	18eb      	adds	r3, r5, r3
 800031a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4299      	cmp	r1, r3
 8000322:	f200 80cd 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 8000326:	4684      	mov	ip, r0
 8000328:	1a59      	subs	r1, r3, r1
 800032a:	b2a3      	uxth	r3, r4
 800032c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000330:	fb0e 1410 	mls	r4, lr, r0, r1
 8000334:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000338:	fb08 f800 	mul.w	r8, r8, r0
 800033c:	45a0      	cmp	r8, r4
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x14c>
 8000340:	192c      	adds	r4, r5, r4
 8000342:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x14a>
 8000348:	45a0      	cmp	r8, r4
 800034a:	f200 80b6 	bhi.w	80004ba <__udivmoddi4+0x2b6>
 800034e:	4618      	mov	r0, r3
 8000350:	eba4 0408 	sub.w	r4, r4, r8
 8000354:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000358:	e79f      	b.n	800029a <__udivmoddi4+0x96>
 800035a:	f1c7 0c20 	rsb	ip, r7, #32
 800035e:	40bb      	lsls	r3, r7
 8000360:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000364:	ea4e 0e03 	orr.w	lr, lr, r3
 8000368:	fa01 f407 	lsl.w	r4, r1, r7
 800036c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000370:	fa21 f30c 	lsr.w	r3, r1, ip
 8000374:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000378:	4325      	orrs	r5, r4
 800037a:	fbb3 f9f8 	udiv	r9, r3, r8
 800037e:	0c2c      	lsrs	r4, r5, #16
 8000380:	fb08 3319 	mls	r3, r8, r9, r3
 8000384:	fa1f fa8e 	uxth.w	sl, lr
 8000388:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800038c:	fb09 f40a 	mul.w	r4, r9, sl
 8000390:	429c      	cmp	r4, r3
 8000392:	fa02 f207 	lsl.w	r2, r2, r7
 8000396:	fa00 f107 	lsl.w	r1, r0, r7
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1e 0303 	adds.w	r3, lr, r3
 80003a0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003a4:	f080 8087 	bcs.w	80004b6 <__udivmoddi4+0x2b2>
 80003a8:	429c      	cmp	r4, r3
 80003aa:	f240 8084 	bls.w	80004b6 <__udivmoddi4+0x2b2>
 80003ae:	f1a9 0902 	sub.w	r9, r9, #2
 80003b2:	4473      	add	r3, lr
 80003b4:	1b1b      	subs	r3, r3, r4
 80003b6:	b2ad      	uxth	r5, r5
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c8:	45a2      	cmp	sl, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1e 0404 	adds.w	r4, lr, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d4:	d26b      	bcs.n	80004ae <__udivmoddi4+0x2aa>
 80003d6:	45a2      	cmp	sl, r4
 80003d8:	d969      	bls.n	80004ae <__udivmoddi4+0x2aa>
 80003da:	3802      	subs	r0, #2
 80003dc:	4474      	add	r4, lr
 80003de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e2:	fba0 8902 	umull	r8, r9, r0, r2
 80003e6:	eba4 040a 	sub.w	r4, r4, sl
 80003ea:	454c      	cmp	r4, r9
 80003ec:	46c2      	mov	sl, r8
 80003ee:	464b      	mov	r3, r9
 80003f0:	d354      	bcc.n	800049c <__udivmoddi4+0x298>
 80003f2:	d051      	beq.n	8000498 <__udivmoddi4+0x294>
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d069      	beq.n	80004cc <__udivmoddi4+0x2c8>
 80003f8:	ebb1 050a 	subs.w	r5, r1, sl
 80003fc:	eb64 0403 	sbc.w	r4, r4, r3
 8000400:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000404:	40fd      	lsrs	r5, r7
 8000406:	40fc      	lsrs	r4, r7
 8000408:	ea4c 0505 	orr.w	r5, ip, r5
 800040c:	e9c6 5400 	strd	r5, r4, [r6]
 8000410:	2700      	movs	r7, #0
 8000412:	e747      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f703 	lsr.w	r7, r0, r3
 800041c:	4095      	lsls	r5, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	fa21 f303 	lsr.w	r3, r1, r3
 8000426:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042a:	4338      	orrs	r0, r7
 800042c:	0c01      	lsrs	r1, r0, #16
 800042e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000432:	fa1f f885 	uxth.w	r8, r5
 8000436:	fb0e 3317 	mls	r3, lr, r7, r3
 800043a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043e:	fb07 f308 	mul.w	r3, r7, r8
 8000442:	428b      	cmp	r3, r1
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x256>
 800044a:	1869      	adds	r1, r5, r1
 800044c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000450:	d22f      	bcs.n	80004b2 <__udivmoddi4+0x2ae>
 8000452:	428b      	cmp	r3, r1
 8000454:	d92d      	bls.n	80004b2 <__udivmoddi4+0x2ae>
 8000456:	3f02      	subs	r7, #2
 8000458:	4429      	add	r1, r5
 800045a:	1acb      	subs	r3, r1, r3
 800045c:	b281      	uxth	r1, r0
 800045e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000462:	fb0e 3310 	mls	r3, lr, r0, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb00 f308 	mul.w	r3, r0, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x27e>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000478:	d217      	bcs.n	80004aa <__udivmoddi4+0x2a6>
 800047a:	428b      	cmp	r3, r1
 800047c:	d915      	bls.n	80004aa <__udivmoddi4+0x2a6>
 800047e:	3802      	subs	r0, #2
 8000480:	4429      	add	r1, r5
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000488:	e73b      	b.n	8000302 <__udivmoddi4+0xfe>
 800048a:	4637      	mov	r7, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e709      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000490:	4607      	mov	r7, r0
 8000492:	e6e7      	b.n	8000264 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x8c>
 8000498:	4541      	cmp	r1, r8
 800049a:	d2ab      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 800049c:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a0:	eb69 020e 	sbc.w	r2, r9, lr
 80004a4:	3801      	subs	r0, #1
 80004a6:	4613      	mov	r3, r2
 80004a8:	e7a4      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004aa:	4660      	mov	r0, ip
 80004ac:	e7e9      	b.n	8000482 <__udivmoddi4+0x27e>
 80004ae:	4618      	mov	r0, r3
 80004b0:	e795      	b.n	80003de <__udivmoddi4+0x1da>
 80004b2:	4667      	mov	r7, ip
 80004b4:	e7d1      	b.n	800045a <__udivmoddi4+0x256>
 80004b6:	4681      	mov	r9, r0
 80004b8:	e77c      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004ba:	3802      	subs	r0, #2
 80004bc:	442c      	add	r4, r5
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0x14c>
 80004c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c4:	442b      	add	r3, r5
 80004c6:	e72f      	b.n	8000328 <__udivmoddi4+0x124>
 80004c8:	4638      	mov	r0, r7
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xda>
 80004cc:	4637      	mov	r7, r6
 80004ce:	e6e9      	b.n	80002a4 <__udivmoddi4+0xa0>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <_ZN5boost3ext3sml6v1_1_54back8policies22thread_safety_policy__11create_lockEv>:
}  // namespace policies
}  // namespace back
namespace back {
namespace policies {
struct thread_safety_policy__ {
  auto create_lock() { return *this; }
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
 80004dc:	4618      	mov	r0, r3
 80004de:	370c      	adds	r7, #12
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr

080004e8 <_ZNKUlvE_clEv>:
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */

struct timer_event {};

auto action_led_on = [] {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(GPIO_LED_GPIO_Port, GPIO_LED_Pin, GPIO_PIN_RESET);
 80004f0:	2200      	movs	r2, #0
 80004f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004f6:	4803      	ldr	r0, [pc, #12]	; (8000504 <_ZNKUlvE_clEv+0x1c>)
 80004f8:	f001 fc4a 	bl	8001d90 <HAL_GPIO_WritePin>
};
 80004fc:	bf00      	nop
 80004fe:	3708      	adds	r7, #8
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	40020800 	.word	0x40020800

08000508 <_ZNKUlvE0_clEv>:
auto action_led_off = [] {
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(GPIO_LED_GPIO_Port, GPIO_LED_Pin, GPIO_PIN_SET);
 8000510:	2201      	movs	r2, #1
 8000512:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000516:	4803      	ldr	r0, [pc, #12]	; (8000524 <_ZNKUlvE0_clEv+0x1c>)
 8000518:	f001 fc3a 	bl	8001d90 <HAL_GPIO_WritePin>
};
 800051c:	bf00      	nop
 800051e:	3708      	adds	r7, #8
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	40020800 	.word	0x40020800

08000528 <_ZN5boost3ext3sml6v1_1_58literalsli2_sIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc102ELc102EEEEDav>:
  return []<auto... Ns>(aux::index_sequence<Ns...>) { return event<aux::string<char, Str.data[Ns]...>>; }
  (aux::make_index_sequence<Str.size>{});
}
#elif !(defined(_MSC_VER) && !defined(__clang__))
template <class T, T... Chrs>
constexpr auto operator""_s() {
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  return front::state<aux::string<T, Chrs...>>{};
}
 800052c:	4618      	mov	r0, r3
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr

08000536 <_ZNK5boost3ext3sml6v1_1_55front5stateINS2_3aux6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc102ELc102EEEEEdeEv>:
  auto operator*() const { return state<TState(initial_state)>{}; }
 8000536:	b480      	push	{r7}
 8000538:	b083      	sub	sp, #12
 800053a:	af00      	add	r7, sp, #0
 800053c:	6078      	str	r0, [r7, #4]
 800053e:	4618      	mov	r0, r3
 8000540:	370c      	adds	r7, #12
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr

0800054a <_ZNK5boost3ext3sml6v1_1_55front10state_implINS3_5stateIFNS2_3aux6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc102ELc102EEEENS3_13initial_stateEEEEEplINS3_5eventI11timer_eventEEEEDaRKT_>:
  auto operator+(const T &t) const {
 800054a:	b480      	push	{r7}
 800054c:	b085      	sub	sp, #20
 800054e:	af00      	add	r7, sp, #0
 8000550:	60f8      	str	r0, [r7, #12]
 8000552:	60b9      	str	r1, [r7, #8]
 8000554:	607a      	str	r2, [r7, #4]
    return transition<TState, T>{static_cast<const TState &>(*this), t};
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	68ba      	ldr	r2, [r7, #8]
 800055a:	601a      	str	r2, [r3, #0]
  }
 800055c:	68f8      	ldr	r0, [r7, #12]
 800055e:	3714      	adds	r7, #20
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr

08000568 <_ZN5boost3ext3sml6v1_1_58literalsli2_sIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc115ELc108ELc111ELc119EEEEDav>:
constexpr auto operator""_s() {
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
}
 800056c:	4618      	mov	r0, r3
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr

08000576 <_ZNK5boost3ext3sml6v1_1_55front10transitionIJNS3_5stateIFNS2_3aux6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc102ELc102EEEENS3_13initial_stateEEEENS3_5eventI11timer_eventEEEEaSINS5_INS7_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc115ELc108ELc111ELc119EEEEEEEEDaRKT_>:
  auto operator=(const T &) const {
 8000576:	b590      	push	{r4, r7, lr}
 8000578:	b083      	sub	sp, #12
 800057a:	af00      	add	r7, sp, #0
 800057c:	6078      	str	r0, [r7, #4]
 800057e:	6039      	str	r1, [r7, #0]
    return transition<T, state<S2>, front::event<E>, always, none>{always{}, none{}};
 8000580:	f107 0208 	add.w	r2, r7, #8
 8000584:	f107 0108 	add.w	r1, r7, #8
 8000588:	f107 0008 	add.w	r0, r7, #8
 800058c:	f000 fa7d 	bl	8000a8a <_ZN5boost3ext3sml6v1_1_55front10transitionIJNS3_5stateINS2_3aux6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc115ELc108ELc111ELc119EEEEEENS5_IFNS7_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc102ELc102EEEENS3_13initial_stateEEEENS3_5eventI11timer_eventEENS3_6alwaysENS3_4noneEEEC1ERKSH_RKSI_>
  }
 8000590:	4620      	mov	r0, r4
 8000592:	370c      	adds	r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	bd90      	pop	{r4, r7, pc}

08000598 <_ZNK5boost3ext3sml6v1_1_55front10state_implINS3_5stateINS2_3aux6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc115ELc108ELc111ELc119EEEEEEEplINS3_5eventI11timer_eventEEEEDaRKT_>:
  auto operator+(const T &t) const {
 8000598:	b480      	push	{r7}
 800059a:	b085      	sub	sp, #20
 800059c:	af00      	add	r7, sp, #0
 800059e:	60f8      	str	r0, [r7, #12]
 80005a0:	60b9      	str	r1, [r7, #8]
 80005a2:	607a      	str	r2, [r7, #4]
    return transition<TState, T>{static_cast<const TState &>(*this), t};
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	68ba      	ldr	r2, [r7, #8]
 80005a8:	601a      	str	r2, [r3, #0]
  }
 80005aa:	68f8      	ldr	r0, [r7, #12]
 80005ac:	3714      	adds	r7, #20
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr

080005b6 <_ZN5boost3ext3sml6v1_1_58literalsli2_sIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEEDav>:
constexpr auto operator""_s() {
 80005b6:	b480      	push	{r7}
 80005b8:	af00      	add	r7, sp, #0
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr

080005c4 <_ZNK5boost3ext3sml6v1_1_55front10transitionIJNS3_5stateINS2_3aux6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc115ELc108ELc111ELc119EEEEEENS3_5eventI11timer_eventEEEEaSINS5_INS7_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEEEEEEDaRKT_>:
  auto operator=(const T &) const {
 80005c4:	b590      	push	{r4, r7, lr}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	6039      	str	r1, [r7, #0]
    return transition<T, state<S2>, front::event<E>, always, none>{always{}, none{}};
 80005ce:	f107 0208 	add.w	r2, r7, #8
 80005d2:	f107 0108 	add.w	r1, r7, #8
 80005d6:	f107 0008 	add.w	r0, r7, #8
 80005da:	f000 fa63 	bl	8000aa4 <_ZN5boost3ext3sml6v1_1_55front10transitionIJNS3_5stateINS2_3aux6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEEEENS5_INS7_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc115ELc108ELc111ELc119EEEEEENS3_5eventI11timer_eventEENS3_6alwaysENS3_4noneEEEC1ERKSF_RKSG_>
  }
 80005de:	4620      	mov	r0, r4
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd90      	pop	{r4, r7, pc}

080005e6 <_ZNK5boost3ext3sml6v1_1_55front5eventI11timer_eventEdvIUlvE_Li0EEEDaRKT_>:
  auto operator/(const T &t) const {
 80005e6:	b580      	push	{r7, lr}
 80005e8:	b084      	sub	sp, #16
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	6078      	str	r0, [r7, #4]
 80005ee:	6039      	str	r1, [r7, #0]
    return transition_ea<event, aux::zero_wrapper<T>>{*this, aux::zero_wrapper<T>{t}};
 80005f0:	f107 030c 	add.w	r3, r7, #12
 80005f4:	3301      	adds	r3, #1
 80005f6:	6839      	ldr	r1, [r7, #0]
 80005f8:	4618      	mov	r0, r3
 80005fa:	f000 fa60 	bl	8000abe <_ZN5boost3ext3sml6v1_1_53aux12zero_wrapperIUlvE_vEC1IJRKS5_EEEDpOT_>
 80005fe:	7b3b      	ldrb	r3, [r7, #12]
  }
 8000600:	4618      	mov	r0, r3
 8000602:	3710      	adds	r7, #16
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <_ZNK5boost3ext3sml6v1_1_53aux17zero_wrapper_implIUlvE_NS3_9type_listIJEEEEclEv>:
  auto operator()(TArgs... args) const { return reinterpret_cast<const TExpr &>(*this)(args...); }
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	6878      	ldr	r0, [r7, #4]
 8000612:	f7ff ff69 	bl	80004e8 <_ZNKUlvE_clEv>
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}

0800061e <_ZNK5boost3ext3sml6v1_1_55front10state_implINS3_5stateINS2_3aux6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEEEEEplINS3_13transition_eaINS3_5eventI11timer_eventEENS6_12zero_wrapperIUlvE_vEEEEEEDaRKT_>:
  auto operator+(const T &t) const {
 800061e:	b590      	push	{r4, r7, lr}
 8000620:	b083      	sub	sp, #12
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
 8000626:	6039      	str	r1, [r7, #0]
    return transition<TState, T>{static_cast<const TState &>(*this), t};
 8000628:	683a      	ldr	r2, [r7, #0]
 800062a:	6879      	ldr	r1, [r7, #4]
 800062c:	f107 0008 	add.w	r0, r7, #8
 8000630:	f000 fa51 	bl	8000ad6 <_ZN5boost3ext3sml6v1_1_55front10transitionIJNS3_5stateINS2_3aux6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEEEENS3_13transition_eaINS3_5eventI11timer_eventEENS6_12zero_wrapperIUlvE_vEEEEEEC1ERKS9_RKSH_>
  }
 8000634:	4620      	mov	r0, r4
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	bd90      	pop	{r4, r7, pc}

0800063c <_ZN5boost3ext3sml6v1_1_58literalsli2_sIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc110EEEEDav>:
constexpr auto operator""_s() {
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
}
 8000640:	4618      	mov	r0, r3
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr

0800064a <_ZNK5boost3ext3sml6v1_1_55front10transitionIJNS3_5stateINS2_3aux6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEEEENS3_13transition_eaINS3_5eventI11timer_eventEENS6_12zero_wrapperIUlvE_vEEEEEEaSINS5_INS7_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc110EEEEEEEEDaRKT_>:
  auto operator=(const T &) const {
 800064a:	b590      	push	{r4, r7, lr}
 800064c:	b083      	sub	sp, #12
 800064e:	af00      	add	r7, sp, #0
 8000650:	6078      	str	r0, [r7, #4]
 8000652:	6039      	str	r1, [r7, #0]
    return transition<T, state<S2>, front::event<E>, always, A>{always{}, a};
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	461a      	mov	r2, r3
 8000658:	f107 0108 	add.w	r1, r7, #8
 800065c:	f107 0008 	add.w	r0, r7, #8
 8000660:	f000 fa4c 	bl	8000afc <_ZN5boost3ext3sml6v1_1_55front10transitionIJNS3_5stateINS2_3aux6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc110EEEEEENS5_INS7_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEEEENS3_5eventI11timer_eventEENS3_6alwaysENS6_12zero_wrapperIUlvE_vEEEEC1ERKSF_RKSI_>
  }
 8000664:	4620      	mov	r0, r4
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	bd90      	pop	{r4, r7, pc}

0800066c <_ZNK5boost3ext3sml6v1_1_55front5eventI11timer_eventEdvIUlvE0_Li0EEEDaRKT_>:
  auto operator/(const T &t) const {
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	6039      	str	r1, [r7, #0]
    return transition_ea<event, aux::zero_wrapper<T>>{*this, aux::zero_wrapper<T>{t}};
 8000676:	f107 030c 	add.w	r3, r7, #12
 800067a:	3301      	adds	r3, #1
 800067c:	6839      	ldr	r1, [r7, #0]
 800067e:	4618      	mov	r0, r3
 8000680:	f000 fa49 	bl	8000b16 <_ZN5boost3ext3sml6v1_1_53aux12zero_wrapperIUlvE0_vEC1IJRKS5_EEEDpOT_>
 8000684:	7b3b      	ldrb	r3, [r7, #12]
  }
 8000686:	4618      	mov	r0, r3
 8000688:	3710      	adds	r7, #16
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}

0800068e <_ZNK5boost3ext3sml6v1_1_53aux17zero_wrapper_implIUlvE0_NS3_9type_listIJEEEEclEv>:
  auto operator()(TArgs... args) const { return reinterpret_cast<const TExpr &>(*this)(args...); }
 800068e:	b580      	push	{r7, lr}
 8000690:	b082      	sub	sp, #8
 8000692:	af00      	add	r7, sp, #0
 8000694:	6078      	str	r0, [r7, #4]
 8000696:	6878      	ldr	r0, [r7, #4]
 8000698:	f7ff ff36 	bl	8000508 <_ZNKUlvE0_clEv>
 800069c:	bf00      	nop
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <_ZNK5boost3ext3sml6v1_1_55front10state_implINS3_5stateINS2_3aux6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc110EEEEEEEplINS3_13transition_eaINS3_5eventI11timer_eventEENS6_12zero_wrapperIUlvE0_vEEEEEEDaRKT_>:
  auto operator+(const T &t) const {
 80006a4:	b590      	push	{r4, r7, lr}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	6039      	str	r1, [r7, #0]
    return transition<TState, T>{static_cast<const TState &>(*this), t};
 80006ae:	683a      	ldr	r2, [r7, #0]
 80006b0:	6879      	ldr	r1, [r7, #4]
 80006b2:	f107 0008 	add.w	r0, r7, #8
 80006b6:	f000 fa3a 	bl	8000b2e <_ZN5boost3ext3sml6v1_1_55front10transitionIJNS3_5stateINS2_3aux6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc110EEEEEENS3_13transition_eaINS3_5eventI11timer_eventEENS6_12zero_wrapperIUlvE0_vEEEEEEC1ERKS9_RKSH_>
  }
 80006ba:	4620      	mov	r0, r4
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd90      	pop	{r4, r7, pc}

080006c2 <_ZNK5boost3ext3sml6v1_1_55front10transitionIJNS3_5stateINS2_3aux6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc110EEEEEENS3_13transition_eaINS3_5eventI11timer_eventEENS6_12zero_wrapperIUlvE0_vEEEEEEaSINS5_INS7_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc102ELc102EEEEEEEEDaRKT_>:
  auto operator=(const T &) const {
 80006c2:	b590      	push	{r4, r7, lr}
 80006c4:	b083      	sub	sp, #12
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	6078      	str	r0, [r7, #4]
 80006ca:	6039      	str	r1, [r7, #0]
    return transition<T, state<S2>, front::event<E>, always, A>{always{}, a};
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	461a      	mov	r2, r3
 80006d0:	f107 0108 	add.w	r1, r7, #8
 80006d4:	f107 0008 	add.w	r0, r7, #8
 80006d8:	f000 fa3c 	bl	8000b54 <_ZN5boost3ext3sml6v1_1_55front10transitionIJNS3_5stateINS2_3aux6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc102ELc102EEEEEENS5_INS7_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc110EEEEEENS3_5eventI11timer_eventEENS3_6alwaysENS6_12zero_wrapperIUlvE0_vEEEEC1ERKSF_RKSI_>
  }
 80006dc:	4620      	mov	r0, r4
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd90      	pop	{r4, r7, pc}

080006e4 <_ZN5boost3ext3sml6v1_1_521make_transition_tableIJNS2_5front10transitionIJNS4_5stateINS2_3aux6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc115ELc108ELc111ELc119EEEEEENS6_IFNS8_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc102ELc102EEEENS4_13initial_stateEEEENS4_5eventI11timer_eventEENS4_6alwaysENS4_4noneEEEENS5_IJNS6_INS8_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEEEESA_SH_SI_SJ_EEENS5_IJNS6_INS8_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc110EEEEEESM_SH_SI_NS7_12zero_wrapperIUlvE_vEEEEENS5_IJNS6_ISB_EESP_SH_SI_NSQ_IUlvE0_vEEEEEELi0EEEDaDpT_>:
__BOOST_SML_UNUSED static front::actions::defer defer;
__BOOST_SML_UNUSED static front::actions::process process;
__BOOST_SML_UNUSED static front::state<class SML_EVAL> eval;
template <class... Ts, __BOOST_SML_REQUIRES(aux::is_same<aux::bool_list<aux::always<Ts>::value...>,
                                                         aux::bool_list<concepts::transitional<Ts>::value...>>::value)>
auto make_transition_table(Ts... ts) {
 80006e4:	b598      	push	{r3, r4, r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  return aux::pool<Ts...>{ts...};
 80006e8:	4638      	mov	r0, r7
 80006ea:	f000 fa74 	bl	8000bd6 <_ZN5boost3ext3sml6v1_1_53aux4poolIJNS2_5front10transitionIJNS5_5stateINS3_6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc115ELc108ELc111ELc119EEEEEENS7_IFNS8_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc102ELc102EEEENS5_13initial_stateEEEENS5_5eventI11timer_eventEENS5_6alwaysENS5_4noneEEEENS6_IJNS7_INS8_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEEEESA_SH_SI_SJ_EEENS6_IJNS7_INS8_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc110EEEEEESM_SH_SI_NS3_12zero_wrapperIUlvE_vEEEEENS6_IJNS7_ISB_EESP_SH_SI_NSQ_IUlvE0_vEEEEEEEC1ESK_SN_ST_SX_>
}
 80006ee:	4620      	mov	r0, r4
 80006f0:	bd98      	pop	{r3, r4, r7, pc}
	...

080006f4 <_ZN11BlinkingLEDclEv>:

class BlinkingLED {
public:
	auto operator()(){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b092      	sub	sp, #72	; 0x48
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
		return make_transition_table(
			 *"state_led_off"_s + event<timer_event> = "state_led_blinking_slow"_s
 80006fc:	f7ff ff14 	bl	8000528 <_ZN5boost3ext3sml6v1_1_58literalsli2_sIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc102ELc102EEEEDav>
 8000700:	f107 0318 	add.w	r3, r7, #24
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff ff16 	bl	8000536 <_ZNK5boost3ext3sml6v1_1_55front5stateINS2_3aux6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc102ELc102EEEEEdeEv>
 800070a:	f107 030c 	add.w	r3, r7, #12
 800070e:	f107 0114 	add.w	r1, r7, #20
 8000712:	4a2c      	ldr	r2, [pc, #176]	; (80007c4 <_ZN11BlinkingLEDclEv+0xd0>)
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff ff18 	bl	800054a <_ZNK5boost3ext3sml6v1_1_55front10state_implINS3_5stateIFNS2_3aux6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc102ELc102EEEENS3_13initial_stateEEEEEplINS3_5eventI11timer_eventEEEEDaRKT_>
 800071a:	f7ff ff25 	bl	8000568 <_ZN5boost3ext3sml6v1_1_58literalsli2_sIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc115ELc108ELc111ELc119EEEEDav>
			, "state_led_blinking_slow"_s + event<timer_event> = "state_led_blinking_fast"_s
			, "state_led_blinking_fast"_s + event<timer_event> / action_led_on = "state_led_on"_s
			, "state_led_on"_s + event<timer_event> / action_led_off = "state_led_off"_s
		);
 800071e:	f107 021c 	add.w	r2, r7, #28
 8000722:	f107 030c 	add.w	r3, r7, #12
 8000726:	4611      	mov	r1, r2
 8000728:	4618      	mov	r0, r3
 800072a:	f7ff ff24 	bl	8000576 <_ZNK5boost3ext3sml6v1_1_55front10transitionIJNS3_5stateIFNS2_3aux6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc102ELc102EEEENS3_13initial_stateEEEENS3_5eventI11timer_eventEEEEaSINS5_INS7_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc115ELc108ELc111ELc119EEEEEEEEDaRKT_>
			, "state_led_blinking_slow"_s + event<timer_event> = "state_led_blinking_fast"_s
 800072e:	f7ff ff1b 	bl	8000568 <_ZN5boost3ext3sml6v1_1_58literalsli2_sIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc115ELc108ELc111ELc119EEEEDav>
 8000732:	f107 0320 	add.w	r3, r7, #32
 8000736:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800073a:	4a22      	ldr	r2, [pc, #136]	; (80007c4 <_ZN11BlinkingLEDclEv+0xd0>)
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff ff2b 	bl	8000598 <_ZNK5boost3ext3sml6v1_1_55front10state_implINS3_5stateINS2_3aux6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc115ELc108ELc111ELc119EEEEEEEplINS3_5eventI11timer_eventEEEEDaRKT_>
 8000742:	f7ff ff38 	bl	80005b6 <_ZN5boost3ext3sml6v1_1_58literalsli2_sIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEEDav>
		);
 8000746:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800074a:	f107 0320 	add.w	r3, r7, #32
 800074e:	4611      	mov	r1, r2
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff ff37 	bl	80005c4 <_ZNK5boost3ext3sml6v1_1_55front10transitionIJNS3_5stateINS2_3aux6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc115ELc108ELc111ELc119EEEEEENS3_5eventI11timer_eventEEEEaSINS5_INS7_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEEEEEEDaRKT_>
			, "state_led_blinking_fast"_s + event<timer_event> / action_led_on = "state_led_on"_s
 8000756:	f7ff ff2e 	bl	80005b6 <_ZN5boost3ext3sml6v1_1_58literalsli2_sIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEEDav>
 800075a:	491b      	ldr	r1, [pc, #108]	; (80007c8 <_ZN11BlinkingLEDclEv+0xd4>)
 800075c:	4819      	ldr	r0, [pc, #100]	; (80007c4 <_ZN11BlinkingLEDclEv+0xd0>)
 800075e:	f7ff ff42 	bl	80005e6 <_ZNK5boost3ext3sml6v1_1_55front5eventI11timer_eventEdvIUlvE_Li0EEEDaRKT_>
 8000762:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000766:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800076a:	4611      	mov	r1, r2
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff ff56 	bl	800061e <_ZNK5boost3ext3sml6v1_1_55front10state_implINS3_5stateINS2_3aux6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEEEEEplINS3_13transition_eaINS3_5eventI11timer_eventEENS6_12zero_wrapperIUlvE_vEEEEEEDaRKT_>
 8000772:	f7ff ff63 	bl	800063c <_ZN5boost3ext3sml6v1_1_58literalsli2_sIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc110EEEEDav>
		);
 8000776:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800077a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800077e:	4611      	mov	r1, r2
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff ff62 	bl	800064a <_ZNK5boost3ext3sml6v1_1_55front10transitionIJNS3_5stateINS2_3aux6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEEEENS3_13transition_eaINS3_5eventI11timer_eventEENS6_12zero_wrapperIUlvE_vEEEEEEaSINS5_INS7_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc110EEEEEEEEDaRKT_>
			, "state_led_on"_s + event<timer_event> / action_led_off = "state_led_off"_s
 8000786:	f7ff ff59 	bl	800063c <_ZN5boost3ext3sml6v1_1_58literalsli2_sIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc110EEEEDav>
 800078a:	4910      	ldr	r1, [pc, #64]	; (80007cc <_ZN11BlinkingLEDclEv+0xd8>)
 800078c:	480d      	ldr	r0, [pc, #52]	; (80007c4 <_ZN11BlinkingLEDclEv+0xd0>)
 800078e:	f7ff ff6d 	bl	800066c <_ZNK5boost3ext3sml6v1_1_55front5eventI11timer_eventEdvIUlvE0_Li0EEEDaRKT_>
 8000792:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000796:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800079a:	4611      	mov	r1, r2
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff ff81 	bl	80006a4 <_ZNK5boost3ext3sml6v1_1_55front10state_implINS3_5stateINS2_3aux6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc110EEEEEEEplINS3_13transition_eaINS3_5eventI11timer_eventEENS6_12zero_wrapperIUlvE0_vEEEEEEDaRKT_>
 80007a2:	f7ff fec1 	bl	8000528 <_ZN5boost3ext3sml6v1_1_58literalsli2_sIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc102ELc102EEEEDav>
		);
 80007a6:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80007aa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80007ae:	4611      	mov	r1, r2
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff ff86 	bl	80006c2 <_ZNK5boost3ext3sml6v1_1_55front10transitionIJNS3_5stateINS2_3aux6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc110EEEEEENS3_13transition_eaINS3_5eventI11timer_eventEENS6_12zero_wrapperIUlvE0_vEEEEEEaSINS5_INS7_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc102ELc102EEEEEEEEDaRKT_>
 80007b6:	f7ff ff95 	bl	80006e4 <_ZN5boost3ext3sml6v1_1_521make_transition_tableIJNS2_5front10transitionIJNS4_5stateINS2_3aux6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc115ELc108ELc111ELc119EEEEEENS6_IFNS8_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc102ELc102EEEENS4_13initial_stateEEEENS4_5eventI11timer_eventEENS4_6alwaysENS4_4noneEEEENS5_IJNS6_INS8_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEEEESA_SH_SI_SJ_EEENS5_IJNS6_INS8_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc110EEEEEESM_SH_SI_NS7_12zero_wrapperIUlvE_vEEEEENS5_IJNS6_ISB_EESP_SH_SI_NSQ_IUlvE0_vEEEEEELi0EEEDaDpT_>
	}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3748      	adds	r7, #72	; 0x48
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	08002f18 	.word	0x08002f18
 80007c8:	20000068 	.word	0x20000068
 80007cc:	2000006c 	.word	0x2000006c

080007d0 <process_timer_event>:
};

sm<BlinkingLED> state_machine;

void process_timer_event() {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
	state_machine.process_event(timer_event{});
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	4619      	mov	r1, r3
 80007da:	4803      	ldr	r0, [pc, #12]	; (80007e8 <process_timer_event+0x18>)
 80007dc:	f000 fa34 	bl	8000c48 <_ZN5boost3ext3sml6v1_1_54back2smINS3_9sm_policyI11BlinkingLEDJEEEE13process_eventI11timer_eventLi0EEEbRKT_>
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000070 	.word	0x20000070

080007ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f2:	f000 ffa5 	bl	8001740 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f6:	f000 f835 	bl	8000864 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007fa:	f000 f8fb 	bl	80009f4 <_ZL12MX_GPIO_Initv>
  MX_TIM2_Init();
 80007fe:	f000 f89d 	bl	800093c <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000802:	2100      	movs	r1, #0
 8000804:	4814      	ldr	r0, [pc, #80]	; (8000858 <main+0x6c>)
 8000806:	f001 ff2b 	bl	8002660 <HAL_TIM_IC_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* USER CODE END WHILE */
	  if (state_machine.is("state_led_blinking_slow"_s))
 800080a:	f7ff fead 	bl	8000568 <_ZN5boost3ext3sml6v1_1_58literalsli2_sIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc115ELc108ELc111ELc119EEEEDav>
 800080e:	463b      	mov	r3, r7
 8000810:	4619      	mov	r1, r3
 8000812:	4812      	ldr	r0, [pc, #72]	; (800085c <main+0x70>)
 8000814:	f000 fa36 	bl	8000c84 <_ZNK5boost3ext3sml6v1_1_54back2smINS3_9sm_policyI11BlinkingLEDJEEEE2isINS2_3aux8identityIS6_EENS2_5front5stateINSA_6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc115ELc108ELc111ELc119EEEEEEEEbRKT0_>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d008      	beq.n	8000830 <main+0x44>
	  {
		  HAL_GPIO_TogglePin(GPIO_LED_GPIO_Port, GPIO_LED_Pin);
 800081e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000822:	480f      	ldr	r0, [pc, #60]	; (8000860 <main+0x74>)
 8000824:	f001 facd 	bl	8001dc2 <HAL_GPIO_TogglePin>
		  HAL_Delay(66);
 8000828:	2042      	movs	r0, #66	; 0x42
 800082a:	f000 fffb 	bl	8001824 <HAL_Delay>
 800082e:	e7ec      	b.n	800080a <main+0x1e>
	  }
	  else if (state_machine.is("state_led_blinking_fast"_s))
 8000830:	f7ff fec1 	bl	80005b6 <_ZN5boost3ext3sml6v1_1_58literalsli2_sIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEEDav>
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	4619      	mov	r1, r3
 8000838:	4808      	ldr	r0, [pc, #32]	; (800085c <main+0x70>)
 800083a:	f000 fa47 	bl	8000ccc <_ZNK5boost3ext3sml6v1_1_54back2smINS3_9sm_policyI11BlinkingLEDJEEEE2isINS2_3aux8identityIS6_EENS2_5front5stateINSA_6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEEEEEEbRKT0_>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d0e2      	beq.n	800080a <main+0x1e>
	  {
		  HAL_GPIO_TogglePin(GPIO_LED_GPIO_Port, GPIO_LED_Pin);
 8000844:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000848:	4805      	ldr	r0, [pc, #20]	; (8000860 <main+0x74>)
 800084a:	f001 faba 	bl	8001dc2 <HAL_GPIO_TogglePin>
		  HAL_Delay(33);
 800084e:	2021      	movs	r0, #33	; 0x21
 8000850:	f000 ffe8 	bl	8001824 <HAL_Delay>
	  if (state_machine.is("state_led_blinking_slow"_s))
 8000854:	e7d9      	b.n	800080a <main+0x1e>
 8000856:	bf00      	nop
 8000858:	20000028 	.word	0x20000028
 800085c:	20000070 	.word	0x20000070
 8000860:	40020800 	.word	0x40020800

08000864 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b094      	sub	sp, #80	; 0x50
 8000868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086a:	f107 0320 	add.w	r3, r7, #32
 800086e:	2230      	movs	r2, #48	; 0x30
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f002 fb34 	bl	8002ee0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000878:	f107 030c 	add.w	r3, r7, #12
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000888:	2300      	movs	r3, #0
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	4b29      	ldr	r3, [pc, #164]	; (8000934 <_Z18SystemClock_Configv+0xd0>)
 800088e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000890:	4a28      	ldr	r2, [pc, #160]	; (8000934 <_Z18SystemClock_Configv+0xd0>)
 8000892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000896:	6413      	str	r3, [r2, #64]	; 0x40
 8000898:	4b26      	ldr	r3, [pc, #152]	; (8000934 <_Z18SystemClock_Configv+0xd0>)
 800089a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a0:	60bb      	str	r3, [r7, #8]
 80008a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008a4:	2300      	movs	r3, #0
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	4b23      	ldr	r3, [pc, #140]	; (8000938 <_Z18SystemClock_Configv+0xd4>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008b0:	4a21      	ldr	r2, [pc, #132]	; (8000938 <_Z18SystemClock_Configv+0xd4>)
 80008b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008b6:	6013      	str	r3, [r2, #0]
 80008b8:	4b1f      	ldr	r3, [pc, #124]	; (8000938 <_Z18SystemClock_Configv+0xd4>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008c4:	2302      	movs	r3, #2
 80008c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008c8:	2301      	movs	r3, #1
 80008ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008cc:	2310      	movs	r3, #16
 80008ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008d0:	2300      	movs	r3, #0
 80008d2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d4:	f107 0320 	add.w	r3, r7, #32
 80008d8:	4618      	mov	r0, r3
 80008da:	f001 fa8d 	bl	8001df8 <HAL_RCC_OscConfig>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	bf14      	ite	ne
 80008e4:	2301      	movne	r3, #1
 80008e6:	2300      	moveq	r3, #0
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 80008ee:	f000 f8c5 	bl	8000a7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f2:	230f      	movs	r3, #15
 80008f4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008fa:	2300      	movs	r3, #0
 80008fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 80008fe:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000902:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8000904:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000908:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800090a:	f107 030c 	add.w	r3, r7, #12
 800090e:	2100      	movs	r1, #0
 8000910:	4618      	mov	r0, r3
 8000912:	f001 fce1 	bl	80022d8 <HAL_RCC_ClockConfig>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	bf14      	ite	ne
 800091c:	2301      	movne	r3, #1
 800091e:	2300      	moveq	r3, #0
 8000920:	b2db      	uxtb	r3, r3
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <_Z18SystemClock_Configv+0xc6>
  {
    Error_Handler();
 8000926:	f000 f8a9 	bl	8000a7c <Error_Handler>
  }
}
 800092a:	bf00      	nop
 800092c:	3750      	adds	r7, #80	; 0x50
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40023800 	.word	0x40023800
 8000938:	40007000 	.word	0x40007000

0800093c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000942:	f107 0308 	add.w	r3, r7, #8
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000950:	463b      	mov	r3, r7
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000958:	4b25      	ldr	r3, [pc, #148]	; (80009f0 <_ZL12MX_TIM2_Initv+0xb4>)
 800095a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800095e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2000;
 8000960:	4b23      	ldr	r3, [pc, #140]	; (80009f0 <_ZL12MX_TIM2_Initv+0xb4>)
 8000962:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000966:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000968:	4b21      	ldr	r3, [pc, #132]	; (80009f0 <_ZL12MX_TIM2_Initv+0xb4>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800096e:	4b20      	ldr	r3, [pc, #128]	; (80009f0 <_ZL12MX_TIM2_Initv+0xb4>)
 8000970:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000974:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000976:	4b1e      	ldr	r3, [pc, #120]	; (80009f0 <_ZL12MX_TIM2_Initv+0xb4>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800097c:	4b1c      	ldr	r3, [pc, #112]	; (80009f0 <_ZL12MX_TIM2_Initv+0xb4>)
 800097e:	2200      	movs	r2, #0
 8000980:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000982:	481b      	ldr	r0, [pc, #108]	; (80009f0 <_ZL12MX_TIM2_Initv+0xb4>)
 8000984:	f001 fe40 	bl	8002608 <HAL_TIM_Base_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	bf14      	ite	ne
 800098e:	2301      	movne	r3, #1
 8000990:	2300      	moveq	r3, #0
 8000992:	b2db      	uxtb	r3, r3
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <_ZL12MX_TIM2_Initv+0x60>
  {
    Error_Handler();
 8000998:	f000 f870 	bl	8000a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800099c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009a2:	f107 0308 	add.w	r3, r7, #8
 80009a6:	4619      	mov	r1, r3
 80009a8:	4811      	ldr	r0, [pc, #68]	; (80009f0 <_ZL12MX_TIM2_Initv+0xb4>)
 80009aa:	f001 ffc9 	bl	8002940 <HAL_TIM_ConfigClockSource>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	bf14      	ite	ne
 80009b4:	2301      	movne	r3, #1
 80009b6:	2300      	moveq	r3, #0
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <_ZL12MX_TIM2_Initv+0x86>
  {
    Error_Handler();
 80009be:	f000 f85d 	bl	8000a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80009c2:	2320      	movs	r3, #32
 80009c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c6:	2300      	movs	r3, #0
 80009c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009ca:	463b      	mov	r3, r7
 80009cc:	4619      	mov	r1, r3
 80009ce:	4808      	ldr	r0, [pc, #32]	; (80009f0 <_ZL12MX_TIM2_Initv+0xb4>)
 80009d0:	f002 f9e0 	bl	8002d94 <HAL_TIMEx_MasterConfigSynchronization>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	bf14      	ite	ne
 80009da:	2301      	movne	r3, #1
 80009dc:	2300      	moveq	r3, #0
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <_ZL12MX_TIM2_Initv+0xac>
  {
    Error_Handler();
 80009e4:	f000 f84a 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009e8:	bf00      	nop
 80009ea:	3718      	adds	r7, #24
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20000028 	.word	0x20000028

080009f4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b088      	sub	sp, #32
 80009f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fa:	f107 030c 	add.w	r3, r7, #12
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
 8000a06:	60da      	str	r2, [r3, #12]
 8000a08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60bb      	str	r3, [r7, #8]
 8000a0e:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <_ZL12MX_GPIO_Initv+0x80>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a18      	ldr	r2, [pc, #96]	; (8000a74 <_ZL12MX_GPIO_Initv+0x80>)
 8000a14:	f043 0304 	orr.w	r3, r3, #4
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <_ZL12MX_GPIO_Initv+0x80>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0304 	and.w	r3, r3, #4
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <_ZL12MX_GPIO_Initv+0x80>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a11      	ldr	r2, [pc, #68]	; (8000a74 <_ZL12MX_GPIO_Initv+0x80>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <_ZL12MX_GPIO_Initv+0x80>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED_GPIO_Port, GPIO_LED_Pin, GPIO_PIN_RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a48:	480b      	ldr	r0, [pc, #44]	; (8000a78 <_ZL12MX_GPIO_Initv+0x84>)
 8000a4a:	f001 f9a1 	bl	8001d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_LED_Pin */
  GPIO_InitStruct.Pin = GPIO_LED_Pin;
 8000a4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a54:	2301      	movs	r3, #1
 8000a56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIO_LED_GPIO_Port, &GPIO_InitStruct);
 8000a60:	f107 030c 	add.w	r3, r7, #12
 8000a64:	4619      	mov	r1, r3
 8000a66:	4804      	ldr	r0, [pc, #16]	; (8000a78 <_ZL12MX_GPIO_Initv+0x84>)
 8000a68:	f001 f810 	bl	8001a8c <HAL_GPIO_Init>

}
 8000a6c:	bf00      	nop
 8000a6e:	3720      	adds	r7, #32
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40020800 	.word	0x40020800

08000a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr

08000a8a <_ZN5boost3ext3sml6v1_1_55front10transitionIJNS3_5stateINS2_3aux6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc115ELc108ELc111ELc119EEEEEENS5_IFNS7_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc102ELc102EEEENS3_13initial_stateEEEENS3_5eventI11timer_eventEENS3_6alwaysENS3_4noneEEEC1ERKSH_RKSI_>:
  transition(const always &, const none &) {}
 8000a8a:	b480      	push	{r7}
 8000a8c:	b085      	sub	sp, #20
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	60f8      	str	r0, [r7, #12]
 8000a92:	60b9      	str	r1, [r7, #8]
 8000a94:	607a      	str	r2, [r7, #4]
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3714      	adds	r7, #20
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <_ZN5boost3ext3sml6v1_1_55front10transitionIJNS3_5stateINS2_3aux6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEEEENS5_INS7_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc115ELc108ELc111ELc119EEEEEENS3_5eventI11timer_eventEENS3_6alwaysENS3_4noneEEEC1ERKSF_RKSG_>:
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	607a      	str	r2, [r7, #4]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3714      	adds	r7, #20
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr

08000abe <_ZN5boost3ext3sml6v1_1_53aux12zero_wrapperIUlvE_vEC1IJRKS5_EEEDpOT_>:
  zero_wrapper(Ts &&...) {}
 8000abe:	b480      	push	{r7}
 8000ac0:	b083      	sub	sp, #12
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
 8000ac6:	6039      	str	r1, [r7, #0]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	4618      	mov	r0, r3
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr

08000ad6 <_ZN5boost3ext3sml6v1_1_55front10transitionIJNS3_5stateINS2_3aux6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEEEENS3_13transition_eaINS3_5eventI11timer_eventEENS6_12zero_wrapperIUlvE_vEEEEEEC1ERKS9_RKSH_>:
  transition(const state<S2> &, const transition_ea<front::event<E>, A> &t)
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b084      	sub	sp, #16
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	60f8      	str	r0, [r7, #12]
 8000ade:	60b9      	str	r1, [r7, #8]
 8000ae0:	607a      	str	r2, [r7, #4]
      : transition<state<internal>, state<S2>, front::event<E>, always, A>{always{}, t.a} {}
 8000ae2:	68f8      	ldr	r0, [r7, #12]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	461a      	mov	r2, r3
 8000aea:	f107 0110 	add.w	r1, r7, #16
 8000aee:	f000 f906 	bl	8000cfe <_ZN5boost3ext3sml6v1_1_55front10transitionIJNS3_5stateINS3_8internalEEENS5_INS2_3aux6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEEEENS3_5eventI11timer_eventEENS3_6alwaysENS8_12zero_wrapperIUlvE_vEEEEC2ERKSF_RKSI_>
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	4618      	mov	r0, r3
 8000af6:	3710      	adds	r7, #16
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <_ZN5boost3ext3sml6v1_1_55front10transitionIJNS3_5stateINS2_3aux6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc110EEEEEENS5_INS7_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEEEENS3_5eventI11timer_eventEENS3_6alwaysENS6_12zero_wrapperIUlvE_vEEEEC1ERKSF_RKSI_>:
  transition(const always &, const A &a) : a(a) {}
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3714      	adds	r7, #20
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr

08000b16 <_ZN5boost3ext3sml6v1_1_53aux12zero_wrapperIUlvE0_vEC1IJRKS5_EEEDpOT_>:
  zero_wrapper(Ts &&...) {}
 8000b16:	b480      	push	{r7}
 8000b18:	b083      	sub	sp, #12
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	6078      	str	r0, [r7, #4]
 8000b1e:	6039      	str	r1, [r7, #0]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4618      	mov	r0, r3
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr

08000b2e <_ZN5boost3ext3sml6v1_1_55front10transitionIJNS3_5stateINS2_3aux6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc110EEEEEENS3_13transition_eaINS3_5eventI11timer_eventEENS6_12zero_wrapperIUlvE0_vEEEEEEC1ERKS9_RKSH_>:
  transition(const state<S2> &, const transition_ea<front::event<E>, A> &t)
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b084      	sub	sp, #16
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	60f8      	str	r0, [r7, #12]
 8000b36:	60b9      	str	r1, [r7, #8]
 8000b38:	607a      	str	r2, [r7, #4]
      : transition<state<internal>, state<S2>, front::event<E>, always, A>{always{}, t.a} {}
 8000b3a:	68f8      	ldr	r0, [r7, #12]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	461a      	mov	r2, r3
 8000b42:	f107 0110 	add.w	r1, r7, #16
 8000b46:	f000 f8e7 	bl	8000d18 <_ZN5boost3ext3sml6v1_1_55front10transitionIJNS3_5stateINS3_8internalEEENS5_INS2_3aux6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc110EEEEEENS3_5eventI11timer_eventEENS3_6alwaysENS8_12zero_wrapperIUlvE0_vEEEEC2ERKSF_RKSI_>
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3710      	adds	r7, #16
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <_ZN5boost3ext3sml6v1_1_55front10transitionIJNS3_5stateINS2_3aux6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc102ELc102EEEEEENS5_INS7_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc110EEEEEENS3_5eventI11timer_eventEENS3_6alwaysENS6_12zero_wrapperIUlvE0_vEEEEC1ERKSF_RKSI_>:
  transition(const always &, const A &a) : a(a) {}
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	607a      	str	r2, [r7, #4]
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	4618      	mov	r0, r3
 8000b64:	3714      	adds	r7, #20
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <_ZN5boost3ext3sml6v1_1_53aux9pool_typeINS2_5front10transitionIJNS5_5stateINS3_6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc115ELc108ELc111ELc119EEEEEENS7_IFNS8_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc102ELc102EEEENS5_13initial_stateEEEENS5_5eventI11timer_eventEENS5_6alwaysENS5_4noneEEEEECI1NS3_14pool_type_implISK_vEEESK_>:
  using pool_type_impl<T>::pool_type_impl;
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b082      	sub	sp, #8
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f000 f8da 	bl	8000d32 <_ZN5boost3ext3sml6v1_1_53aux14pool_type_implINS2_5front10transitionIJNS5_5stateINS3_6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc115ELc108ELc111ELc119EEEEEENS7_IFNS8_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc102ELc102EEEENS5_13initial_stateEEEENS5_5eventI11timer_eventEENS5_6alwaysENS5_4noneEEEEvEC1ESK_>
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4618      	mov	r0, r3
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <_ZN5boost3ext3sml6v1_1_53aux9pool_typeINS2_5front10transitionIJNS5_5stateINS3_6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEEEENS7_INS8_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc115ELc108ELc111ELc119EEEEEENS5_5eventI11timer_eventEENS5_6alwaysENS5_4noneEEEEECI1NS3_14pool_type_implISI_vEEESI_>:
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4618      	mov	r0, r3
 8000b94:	f000 f8d8 	bl	8000d48 <_ZN5boost3ext3sml6v1_1_53aux14pool_type_implINS2_5front10transitionIJNS5_5stateINS3_6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEEEENS7_INS8_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc115ELc108ELc111ELc119EEEEEENS5_5eventI11timer_eventEENS5_6alwaysENS5_4noneEEEEvEC1ESI_>
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <_ZN5boost3ext3sml6v1_1_53aux9pool_typeINS2_5front10transitionIJNS5_5stateINS3_6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc110EEEEEENS7_INS8_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEEEENS5_5eventI11timer_eventEENS5_6alwaysENS3_12zero_wrapperIUlvE_vEEEEEECI2NS3_14pool_type_implISK_vEEESK_>:
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b082      	sub	sp, #8
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4618      	mov	r0, r3
 8000bae:	f000 f8d6 	bl	8000d5e <_ZN5boost3ext3sml6v1_1_53aux14pool_type_implINS2_5front10transitionIJNS5_5stateINS3_6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc110EEEEEENS7_INS8_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEEEENS5_5eventI11timer_eventEENS5_6alwaysENS3_12zero_wrapperIUlvE_vEEEEEvEC2ESK_>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <_ZN5boost3ext3sml6v1_1_53aux9pool_typeINS2_5front10transitionIJNS5_5stateINS3_6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc102ELc102EEEEEENS7_INS8_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc110EEEEEENS5_5eventI11timer_eventEENS5_6alwaysENS3_12zero_wrapperIUlvE0_vEEEEEECI2NS3_14pool_type_implISK_vEEESK_>:
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f000 f8d4 	bl	8000d74 <_ZN5boost3ext3sml6v1_1_53aux14pool_type_implINS2_5front10transitionIJNS5_5stateINS3_6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc102ELc102EEEEEENS7_INS8_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc110EEEEEENS5_5eventI11timer_eventEENS5_6alwaysENS3_12zero_wrapperIUlvE0_vEEEEEvEC2ESK_>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <_ZN5boost3ext3sml6v1_1_53aux4poolIJNS2_5front10transitionIJNS5_5stateINS3_6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc115ELc108ELc111ELc119EEEEEENS7_IFNS8_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc102ELc102EEEENS5_13initial_stateEEEENS5_5eventI11timer_eventEENS5_6alwaysENS5_4noneEEEENS6_IJNS7_INS8_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEEEESA_SH_SI_SJ_EEENS6_IJNS7_INS8_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc110EEEEEESM_SH_SI_NS3_12zero_wrapperIUlvE_vEEEEENS6_IJNS7_ISB_EESP_SH_SI_NSQ_IUlvE0_vEEEEEEEC1ESK_SN_ST_SX_>:
  explicit pool(Ts... ts) : pool_type<Ts>(ts)... {}
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b082      	sub	sp, #8
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff ffc4 	bl	8000b6e <_ZN5boost3ext3sml6v1_1_53aux9pool_typeINS2_5front10transitionIJNS5_5stateINS3_6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc115ELc108ELc111ELc119EEEEEENS7_IFNS8_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc102ELc102EEEENS5_13initial_stateEEEENS5_5eventI11timer_eventEENS5_6alwaysENS5_4noneEEEEECI1NS3_14pool_type_implISK_vEEESK_>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff ffcd 	bl	8000b88 <_ZN5boost3ext3sml6v1_1_53aux9pool_typeINS2_5front10transitionIJNS5_5stateINS3_6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEEEENS7_INS8_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc115ELc108ELc111ELc119EEEEEENS5_5eventI11timer_eventEENS5_6alwaysENS5_4noneEEEEECI1NS3_14pool_type_implISI_vEEESI_>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff ffd6 	bl	8000ba2 <_ZN5boost3ext3sml6v1_1_53aux9pool_typeINS2_5front10transitionIJNS5_5stateINS3_6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc110EEEEEENS7_INS8_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEEEENS5_5eventI11timer_eventEENS5_6alwaysENS3_12zero_wrapperIUlvE_vEEEEEECI2NS3_14pool_type_implISK_vEEESK_>
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff ffdf 	bl	8000bbc <_ZN5boost3ext3sml6v1_1_53aux9pool_typeINS2_5front10transitionIJNS5_5stateINS3_6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc102ELc102EEEEEENS7_INS8_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc110EEEEEENS5_5eventI11timer_eventEENS5_6alwaysENS3_12zero_wrapperIUlvE0_vEEEEEECI2NS3_14pool_type_implISK_vEEESK_>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4618      	mov	r0, r3
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <_ZN5boost3ext3sml6v1_1_54back2smINS3_9sm_policyI11BlinkingLEDJEEEEC1Ev>:
  sm() : deps_{aux::init{}, aux::pool<>{}}, sub_sms_{aux::pool<>{}} { aux::get<sm_impl<TSM>>(sub_sms_).start(deps_, sub_sms_); }
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f107 010c 	add.w	r1, r7, #12
 8000c16:	f107 0210 	add.w	r2, r7, #16
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f000 f8b5 	bl	8000d8a <_ZN5boost3ext3sml6v1_1_53aux4poolIJEEC1IJNS3_4initES5_EEEDpOT_>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f107 0110 	add.w	r1, r7, #16
 8000c26:	4618      	mov	r0, r3
 8000c28:	f000 f8cb 	bl	8000dc2 <_ZN5boost3ext3sml6v1_1_53aux4poolIJNS2_4back7sm_implINS5_9sm_policyI11BlinkingLEDJEEEEEEEC1IJEEERKNS4_IJDpT_EEE>
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f000 f8d6 	bl	8000de0 <_ZN5boost3ext3sml6v1_1_53aux3getINS2_4back7sm_implINS5_9sm_policyI11BlinkingLEDJEEEEENS3_4poolIJSA_EEEEERT_RT0_>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	687a      	ldr	r2, [r7, #4]
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f000 f8dc 	bl	8000df6 <_ZN5boost3ext3sml6v1_1_54back7sm_implINS3_9sm_policyI11BlinkingLEDJEEEE5startINS2_3aux4poolIJEEENSB_IJS8_EEEEEvRT_RT0_>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4618      	mov	r0, r3
 8000c42:	3710      	adds	r7, #16
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <_ZN5boost3ext3sml6v1_1_54back2smINS3_9sm_policyI11BlinkingLEDJEEEE13process_eventI11timer_eventLi0EEEbRKT_>:
  bool process_event(const TEvent &event) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
    return aux::get<sm_impl<TSM>>(sub_sms_).process_event(event, deps_, sub_sms_);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4618      	mov	r0, r3
 8000c56:	f000 f8c3 	bl	8000de0 <_ZN5boost3ext3sml6v1_1_53aux3getINS2_4back7sm_implINS5_9sm_policyI11BlinkingLEDJEEEEENS3_4poolIJSA_EEEEERT_RT0_>
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6839      	ldr	r1, [r7, #0]
 8000c60:	f000 f8e2 	bl	8000e28 <_ZN5boost3ext3sml6v1_1_54back7sm_implINS3_9sm_policyI11BlinkingLEDJEEEE13process_eventI11timer_eventNS2_3aux4poolIJEEENSC_IJS8_EEEEEbRKT_RT0_RT1_>
 8000c64:	4603      	mov	r3, r0
  }
 8000c66:	4618      	mov	r0, r3
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <_ZN5boost3ext3sml6v1_1_53aux6get_idIhNS3_6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc115ELc108ELc111ELc119EEEELi1EEET_PNS3_12type_id_typeIXT1_ET0_EE>:
constexpr R get_id(type_id_type<N, T> *) {
 8000c6e:	b480      	push	{r7}
 8000c70:	b083      	sub	sp, #12
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
  return static_cast<R>(N);
 8000c76:	2301      	movs	r3, #1
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <_ZNK5boost3ext3sml6v1_1_54back2smINS3_9sm_policyI11BlinkingLEDJEEEE2isINS2_3aux8identityIS6_EENS2_5front5stateINSA_6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc115ELc108ELc111ELc119EEEEEEEEbRKT0_>:
  bool is(const TState &) const {
 8000c84:	b590      	push	{r4, r7, lr}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	6039      	str	r1, [r7, #0]
    return aux::get_id<state_t, typename TState::type>((states_ids_t *)0) == aux::cget<sm_impl_t>(sub_sms_).current_state_[0];
 8000c8e:	2000      	movs	r0, #0
 8000c90:	f7ff ffed 	bl	8000c6e <_ZN5boost3ext3sml6v1_1_53aux6get_idIhNS3_6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc115ELc108ELc111ELc119EEEELi1EEET_PNS3_12type_id_typeIXT1_ET0_EE>
 8000c94:	4603      	mov	r3, r0
 8000c96:	461c      	mov	r4, r3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f000 f906 	bl	8000eac <_ZN5boost3ext3sml6v1_1_53aux4cgetINS2_4back7sm_implINS5_9sm_policyI11BlinkingLEDJEEEEENS3_4poolIJSA_EEEEERKT_RKT0_>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	429c      	cmp	r4, r3
 8000ca6:	bf0c      	ite	eq
 8000ca8:	2301      	moveq	r3, #1
 8000caa:	2300      	movne	r3, #0
 8000cac:	b2db      	uxtb	r3, r3
  }
 8000cae:	4618      	mov	r0, r3
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd90      	pop	{r4, r7, pc}

08000cb6 <_ZN5boost3ext3sml6v1_1_53aux6get_idIhNS3_6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEELi2EEET_PNS3_12type_id_typeIXT1_ET0_EE>:
constexpr R get_id(type_id_type<N, T> *) {
 8000cb6:	b480      	push	{r7}
 8000cb8:	b083      	sub	sp, #12
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
  return static_cast<R>(N);
 8000cbe:	2302      	movs	r3, #2
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <_ZNK5boost3ext3sml6v1_1_54back2smINS3_9sm_policyI11BlinkingLEDJEEEE2isINS2_3aux8identityIS6_EENS2_5front5stateINSA_6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEEEEEEbRKT0_>:
  bool is(const TState &) const {
 8000ccc:	b590      	push	{r4, r7, lr}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	6039      	str	r1, [r7, #0]
    return aux::get_id<state_t, typename TState::type>((states_ids_t *)0) == aux::cget<sm_impl_t>(sub_sms_).current_state_[0];
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f7ff ffed 	bl	8000cb6 <_ZN5boost3ext3sml6v1_1_53aux6get_idIhNS3_6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEELi2EEET_PNS3_12type_id_typeIXT1_ET0_EE>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	461c      	mov	r4, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f000 f8e2 	bl	8000eac <_ZN5boost3ext3sml6v1_1_53aux4cgetINS2_4back7sm_implINS5_9sm_policyI11BlinkingLEDJEEEEENS3_4poolIJSA_EEEEERKT_RKT0_>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	429c      	cmp	r4, r3
 8000cee:	bf0c      	ite	eq
 8000cf0:	2301      	moveq	r3, #1
 8000cf2:	2300      	movne	r3, #0
 8000cf4:	b2db      	uxtb	r3, r3
  }
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd90      	pop	{r4, r7, pc}

08000cfe <_ZN5boost3ext3sml6v1_1_55front10transitionIJNS3_5stateINS3_8internalEEENS5_INS2_3aux6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEEEENS3_5eventI11timer_eventEENS3_6alwaysENS8_12zero_wrapperIUlvE_vEEEEC2ERKSF_RKSI_>:
  transition(const always &, const A &a) : a(a) {}
 8000cfe:	b480      	push	{r7}
 8000d00:	b085      	sub	sp, #20
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	60f8      	str	r0, [r7, #12]
 8000d06:	60b9      	str	r1, [r7, #8]
 8000d08:	607a      	str	r2, [r7, #4]
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3714      	adds	r7, #20
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <_ZN5boost3ext3sml6v1_1_55front10transitionIJNS3_5stateINS3_8internalEEENS5_INS2_3aux6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc110EEEEEENS3_5eventI11timer_eventEENS3_6alwaysENS8_12zero_wrapperIUlvE0_vEEEEC2ERKSF_RKSI_>:
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	4618      	mov	r0, r3
 8000d28:	3714      	adds	r7, #20
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr

08000d32 <_ZN5boost3ext3sml6v1_1_53aux14pool_type_implINS2_5front10transitionIJNS5_5stateINS3_6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc115ELc108ELc111ELc119EEEEEENS7_IFNS8_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc102ELc102EEEENS5_13initial_stateEEEENS5_5eventI11timer_eventEENS5_6alwaysENS5_4noneEEEEvEC1ESK_>:
  explicit pool_type_impl(T object) : value{object} {}
 8000d32:	b480      	push	{r7}
 8000d34:	b083      	sub	sp, #12
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <_ZN5boost3ext3sml6v1_1_53aux14pool_type_implINS2_5front10transitionIJNS5_5stateINS3_6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEEEENS7_INS8_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc115ELc108ELc111ELc119EEEEEENS5_5eventI11timer_eventEENS5_6alwaysENS5_4noneEEEEvEC1ESI_>:
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4618      	mov	r0, r3
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr

08000d5e <_ZN5boost3ext3sml6v1_1_53aux14pool_type_implINS2_5front10transitionIJNS5_5stateINS3_6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc110EEEEEENS7_INS8_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEEEENS5_5eventI11timer_eventEENS5_6alwaysENS3_12zero_wrapperIUlvE_vEEEEEvEC2ESK_>:
 8000d5e:	b480      	push	{r7}
 8000d60:	b083      	sub	sp, #12
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <_ZN5boost3ext3sml6v1_1_53aux14pool_type_implINS2_5front10transitionIJNS5_5stateINS3_6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc102ELc102EEEEEENS7_INS8_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc110EEEEEENS5_5eventI11timer_eventEENS5_6alwaysENS3_12zero_wrapperIUlvE0_vEEEEEvEC2ESK_>:
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <_ZN5boost3ext3sml6v1_1_53aux4poolIJEEC1IJNS3_4initES5_EEEDpOT_>:
  explicit pool(Ts &&...) {}
 8000d8a:	b480      	push	{r7}
 8000d8c:	b085      	sub	sp, #20
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	60f8      	str	r0, [r7, #12]
 8000d92:	60b9      	str	r1, [r7, #8]
 8000d94:	607a      	str	r2, [r7, #4]
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3714      	adds	r7, #20
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <_ZN5boost3ext3sml6v1_1_53aux9pool_typeINS2_4back7sm_implINS5_9sm_policyI11BlinkingLEDJEEEEEECI1NS3_14pool_type_implISA_vEEINS3_4poolIJEEEEENS3_4initET_>:
  using pool_type_impl<T>::pool_type_impl;
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	7039      	strb	r1, [r7, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4611      	mov	r1, r2
 8000db2:	4618      	mov	r0, r3
 8000db4:	f000 f885 	bl	8000ec2 <_ZN5boost3ext3sml6v1_1_53aux14pool_type_implINS2_4back7sm_implINS5_9sm_policyI11BlinkingLEDJEEEEEvEC1INS3_4poolIJEEEEENS3_4initET_>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <_ZN5boost3ext3sml6v1_1_53aux4poolIJNS2_4back7sm_implINS5_9sm_policyI11BlinkingLEDJEEEEEEEC1IJEEERKNS4_IJDpT_EEE>:
  pool(const pool<TArgs...> &p) : pool_type<Ts>(init{}, p)... {}
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b084      	sub	sp, #16
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
 8000dca:	6039      	str	r1, [r7, #0]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	4611      	mov	r1, r2
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff ffe7 	bl	8000da4 <_ZN5boost3ext3sml6v1_1_53aux9pool_typeINS2_4back7sm_implINS5_9sm_policyI11BlinkingLEDJEEEEEECI1NS3_14pool_type_implISA_vEEINS3_4poolIJEEEEENS3_4initET_>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3710      	adds	r7, #16
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <_ZN5boost3ext3sml6v1_1_53aux3getINS2_4back7sm_implINS5_9sm_policyI11BlinkingLEDJEEEEENS3_4poolIJSA_EEEEERT_RT0_>:
T &get(TPool &p) {
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  return static_cast<pool_type<T> &>(p).value;
 8000de8:	687b      	ldr	r3, [r7, #4]
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <_ZN5boost3ext3sml6v1_1_54back7sm_implINS3_9sm_policyI11BlinkingLEDJEEEE5startINS2_3aux4poolIJEEENSB_IJS8_EEEEEvRT_RT0_>:
  void start(TDeps &deps, TSubs &subs) {
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b086      	sub	sp, #24
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	60f8      	str	r0, [r7, #12]
 8000dfe:	60b9      	str	r1, [r7, #8]
 8000e00:	607a      	str	r2, [r7, #4]
    process_event(on_entry<_, initial>{}, deps, subs);
 8000e02:	f107 0214 	add.w	r2, r7, #20
 8000e06:	f107 0310 	add.w	r3, r7, #16
 8000e0a:	4611      	mov	r1, r2
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f000 f868 	bl	8000ee2 <_ZN5boost3ext3sml6v1_1_54back8on_entryINS3_1_ENS3_7initialEEC1ERKS6_>
 8000e12:	f107 0110 	add.w	r1, r7, #16
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	68ba      	ldr	r2, [r7, #8]
 8000e1a:	68f8      	ldr	r0, [r7, #12]
 8000e1c:	f000 f870 	bl	8000f00 <_ZN5boost3ext3sml6v1_1_54back7sm_implINS3_9sm_policyI11BlinkingLEDJEEEE13process_eventINS3_8on_entryINS3_1_ENS3_7initialEEENS2_3aux4poolIJEEENSF_IJS8_EEEEEbRKT_RT0_RT1_>
  }
 8000e20:	bf00      	nop
 8000e22:	3718      	adds	r7, #24
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <_ZN5boost3ext3sml6v1_1_54back7sm_implINS3_9sm_policyI11BlinkingLEDJEEEE13process_eventI11timer_eventNS2_3aux4poolIJEEENSC_IJS8_EEEEEbRKT_RT0_RT1_>:
  bool process_event(const TEvent &event, TDeps &deps, TSubs &subs) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08c      	sub	sp, #48	; 0x30
 8000e2c:	af02      	add	r7, sp, #8
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
 8000e34:	603b      	str	r3, [r7, #0]
    bool handled = process_internal_events(event, deps, subs);
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	68b9      	ldr	r1, [r7, #8]
 8000e3c:	68f8      	ldr	r0, [r7, #12]
 8000e3e:	f000 f8a1 	bl	8000f84 <_ZN5boost3ext3sml6v1_1_54back7sm_implINS3_9sm_policyI11BlinkingLEDJEEEE23process_internal_eventsI11timer_eventNS2_3aux4poolIJEEENSC_IJS8_EEELi0EEEbRKT_RT0_RT1_>
 8000e42:	4603      	mov	r3, r0
 8000e44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        while (process_internal_events(anonymous{}, deps, subs)) {
 8000e48:	f107 0114 	add.w	r1, r7, #20
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	68f8      	ldr	r0, [r7, #12]
 8000e52:	f000 f8b5 	bl	8000fc0 <_ZN5boost3ext3sml6v1_1_54back7sm_implINS3_9sm_policyI11BlinkingLEDJEEEE23process_internal_eventsINS3_9anonymousENS2_3aux4poolIJEEENSC_IJS8_EEEJELi0EEEbRKT_RT0_RT1_DpOT2_>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d000      	beq.n	8000e5e <_ZN5boost3ext3sml6v1_1_54back7sm_implINS3_9sm_policyI11BlinkingLEDJEEEE13process_eventI11timer_eventNS2_3aux4poolIJEEENSC_IJS8_EEEEEbRKT_RT0_RT1_+0x36>
 8000e5c:	e7f4      	b.n	8000e48 <_ZN5boost3ext3sml6v1_1_54back7sm_implINS3_9sm_policyI11BlinkingLEDJEEEE13process_eventI11timer_eventNS2_3aux4poolIJEEENSC_IJS8_EEEEEbRKT_RT0_RT1_+0x20>
      } while (process_defer_events(deps, subs, handled, aux::type<defer_queue_t<TEvent>>{}, events_t{}));
 8000e5e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000e62:	f107 031c 	add.w	r3, r7, #28
 8000e66:	9301      	str	r3, [sp, #4]
 8000e68:	f107 0318 	add.w	r3, r7, #24
 8000e6c:	9300      	str	r3, [sp, #0]
 8000e6e:	4613      	mov	r3, r2
 8000e70:	683a      	ldr	r2, [r7, #0]
 8000e72:	6879      	ldr	r1, [r7, #4]
 8000e74:	68f8      	ldr	r0, [r7, #12]
 8000e76:	f000 f8b1 	bl	8000fdc <_ZN5boost3ext3sml6v1_1_54back7sm_implINS3_9sm_policyI11BlinkingLEDJEEEE20process_defer_eventsINS2_3aux4poolIJEEENSB_IJS8_EEEJ11timer_eventEEEbRT_RT0_bRKNSA_4typeIJNS3_9no_policyEEEERKNSA_9type_listIJDpT1_EEE>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d000      	beq.n	8000e82 <_ZN5boost3ext3sml6v1_1_54back7sm_implINS3_9sm_policyI11BlinkingLEDJEEEE13process_eventI11timer_eventNS2_3aux4poolIJEEENSC_IJS8_EEEEEbRKT_RT0_RT1_+0x5a>
      do {
 8000e80:	e7e2      	b.n	8000e48 <_ZN5boost3ext3sml6v1_1_54back7sm_implINS3_9sm_policyI11BlinkingLEDJEEEE13process_eventI11timer_eventNS2_3aux4poolIJEEENSC_IJS8_EEEEEbRKT_RT0_RT1_+0x20>
    } while (process_queued_events(deps, subs, aux::type<process_queue_t<TEvent>>{}, events_t{}));
 8000e82:	f107 0220 	add.w	r2, r7, #32
 8000e86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e8a:	9300      	str	r3, [sp, #0]
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	683a      	ldr	r2, [r7, #0]
 8000e90:	6879      	ldr	r1, [r7, #4]
 8000e92:	68f8      	ldr	r0, [r7, #12]
 8000e94:	f000 f8b0 	bl	8000ff8 <_ZN5boost3ext3sml6v1_1_54back7sm_implINS3_9sm_policyI11BlinkingLEDJEEEE21process_queued_eventsINS2_3aux4poolIJEEENSB_IJS8_EEEJ11timer_eventEEEbRT_RT0_RKNSA_4typeIJNS3_9no_policyEEEERKNSA_9type_listIJDpT1_EEE>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d000      	beq.n	8000ea0 <_ZN5boost3ext3sml6v1_1_54back7sm_implINS3_9sm_policyI11BlinkingLEDJEEEE13process_eventI11timer_eventNS2_3aux4poolIJEEENSC_IJS8_EEEEEbRKT_RT0_RT1_+0x78>
    do {
 8000e9e:	e7d3      	b.n	8000e48 <_ZN5boost3ext3sml6v1_1_54back7sm_implINS3_9sm_policyI11BlinkingLEDJEEEE13process_eventI11timer_eventNS2_3aux4poolIJEEENSC_IJS8_EEEEEbRKT_RT0_RT1_+0x20>
    return handled;
 8000ea0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  }
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3728      	adds	r7, #40	; 0x28
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <_ZN5boost3ext3sml6v1_1_53aux4cgetINS2_4back7sm_implINS5_9sm_policyI11BlinkingLEDJEEEEENS3_4poolIJSA_EEEEERKT_RKT0_>:
const T &cget(const TPool &p) {
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  return static_cast<const pool_type<T> &>(p).value;
 8000eb4:	687b      	ldr	r3, [r7, #4]
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <_ZN5boost3ext3sml6v1_1_53aux14pool_type_implINS2_4back7sm_implINS5_9sm_policyI11BlinkingLEDJEEEEEvEC1INS3_4poolIJEEEEENS3_4initET_>:
  pool_type_impl(init i, TObject object) : value{i, object} {}
 8000ec2:	b590      	push	{r4, r7, lr}
 8000ec4:	b083      	sub	sp, #12
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
 8000eca:	7039      	strb	r1, [r7, #0]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	463a      	mov	r2, r7
 8000ed0:	4621      	mov	r1, r4
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f000 f89e 	bl	8001014 <_ZN5boost3ext3sml6v1_1_54back7sm_implINS3_9sm_policyI11BlinkingLEDJEEEEC1INS2_3aux4poolIJEEEEENSA_4initERKT_>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4618      	mov	r0, r3
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd90      	pop	{r4, r7, pc}

08000ee2 <_ZN5boost3ext3sml6v1_1_54back8on_entryINS3_1_ENS3_7initialEEC1ERKS6_>:
  explicit on_entry(const TEvent &event = {}) : event_(event) {}
 8000ee2:	b480      	push	{r7}
 8000ee4:	b083      	sub	sp, #12
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
 8000eea:	6039      	str	r1, [r7, #0]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	683a      	ldr	r2, [r7, #0]
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <_ZN5boost3ext3sml6v1_1_54back7sm_implINS3_9sm_policyI11BlinkingLEDJEEEE13process_eventINS3_8on_entryINS3_1_ENS3_7initialEEENS2_3aux4poolIJEEENSF_IJS8_EEEEEbRKT_RT0_RT1_>:
  bool process_event(const TEvent &event, TDeps &deps, TSubs &subs) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08c      	sub	sp, #48	; 0x30
 8000f04:	af02      	add	r7, sp, #8
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
 8000f0c:	603b      	str	r3, [r7, #0]
    bool handled = process_internal_events(event, deps, subs);
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	68b9      	ldr	r1, [r7, #8]
 8000f14:	68f8      	ldr	r0, [r7, #12]
 8000f16:	f000 f88d 	bl	8001034 <_ZN5boost3ext3sml6v1_1_54back7sm_implINS3_9sm_policyI11BlinkingLEDJEEEE23process_internal_eventsINS3_8on_entryINS3_1_ENS3_7initialEEENS2_3aux4poolIJEEENSF_IJS8_EEEJELi0EEEbRKT_RT0_RT1_DpOT2_>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        while (process_internal_events(anonymous{}, deps, subs)) {
 8000f20:	f107 0114 	add.w	r1, r7, #20
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	68f8      	ldr	r0, [r7, #12]
 8000f2a:	f000 f849 	bl	8000fc0 <_ZN5boost3ext3sml6v1_1_54back7sm_implINS3_9sm_policyI11BlinkingLEDJEEEE23process_internal_eventsINS3_9anonymousENS2_3aux4poolIJEEENSC_IJS8_EEEJELi0EEEbRKT_RT0_RT1_DpOT2_>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d000      	beq.n	8000f36 <_ZN5boost3ext3sml6v1_1_54back7sm_implINS3_9sm_policyI11BlinkingLEDJEEEE13process_eventINS3_8on_entryINS3_1_ENS3_7initialEEENS2_3aux4poolIJEEENSF_IJS8_EEEEEbRKT_RT0_RT1_+0x36>
 8000f34:	e7f4      	b.n	8000f20 <_ZN5boost3ext3sml6v1_1_54back7sm_implINS3_9sm_policyI11BlinkingLEDJEEEE13process_eventINS3_8on_entryINS3_1_ENS3_7initialEEENS2_3aux4poolIJEEENSF_IJS8_EEEEEbRKT_RT0_RT1_+0x20>
      } while (process_defer_events(deps, subs, handled, aux::type<defer_queue_t<TEvent>>{}, events_t{}));
 8000f36:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000f3a:	f107 031c 	add.w	r3, r7, #28
 8000f3e:	9301      	str	r3, [sp, #4]
 8000f40:	f107 0318 	add.w	r3, r7, #24
 8000f44:	9300      	str	r3, [sp, #0]
 8000f46:	4613      	mov	r3, r2
 8000f48:	683a      	ldr	r2, [r7, #0]
 8000f4a:	6879      	ldr	r1, [r7, #4]
 8000f4c:	68f8      	ldr	r0, [r7, #12]
 8000f4e:	f000 f845 	bl	8000fdc <_ZN5boost3ext3sml6v1_1_54back7sm_implINS3_9sm_policyI11BlinkingLEDJEEEE20process_defer_eventsINS2_3aux4poolIJEEENSB_IJS8_EEEJ11timer_eventEEEbRT_RT0_bRKNSA_4typeIJNS3_9no_policyEEEERKNSA_9type_listIJDpT1_EEE>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d000      	beq.n	8000f5a <_ZN5boost3ext3sml6v1_1_54back7sm_implINS3_9sm_policyI11BlinkingLEDJEEEE13process_eventINS3_8on_entryINS3_1_ENS3_7initialEEENS2_3aux4poolIJEEENSF_IJS8_EEEEEbRKT_RT0_RT1_+0x5a>
      do {
 8000f58:	e7e2      	b.n	8000f20 <_ZN5boost3ext3sml6v1_1_54back7sm_implINS3_9sm_policyI11BlinkingLEDJEEEE13process_eventINS3_8on_entryINS3_1_ENS3_7initialEEENS2_3aux4poolIJEEENSF_IJS8_EEEEEbRKT_RT0_RT1_+0x20>
    } while (process_queued_events(deps, subs, aux::type<process_queue_t<TEvent>>{}, events_t{}));
 8000f5a:	f107 0220 	add.w	r2, r7, #32
 8000f5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	4613      	mov	r3, r2
 8000f66:	683a      	ldr	r2, [r7, #0]
 8000f68:	6879      	ldr	r1, [r7, #4]
 8000f6a:	68f8      	ldr	r0, [r7, #12]
 8000f6c:	f000 f844 	bl	8000ff8 <_ZN5boost3ext3sml6v1_1_54back7sm_implINS3_9sm_policyI11BlinkingLEDJEEEE21process_queued_eventsINS2_3aux4poolIJEEENSB_IJS8_EEEJ11timer_eventEEEbRT_RT0_RKNSA_4typeIJNS3_9no_policyEEEERKNSA_9type_listIJDpT1_EEE>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d000      	beq.n	8000f78 <_ZN5boost3ext3sml6v1_1_54back7sm_implINS3_9sm_policyI11BlinkingLEDJEEEE13process_eventINS3_8on_entryINS3_1_ENS3_7initialEEENS2_3aux4poolIJEEENSF_IJS8_EEEEEbRKT_RT0_RT1_+0x78>
    do {
 8000f76:	e7d3      	b.n	8000f20 <_ZN5boost3ext3sml6v1_1_54back7sm_implINS3_9sm_policyI11BlinkingLEDJEEEE13process_eventINS3_8on_entryINS3_1_ENS3_7initialEEENS2_3aux4poolIJEEENSF_IJS8_EEEEEbRKT_RT0_RT1_+0x20>
    return handled;
 8000f78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  }
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3728      	adds	r7, #40	; 0x28
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <_ZN5boost3ext3sml6v1_1_54back7sm_implINS3_9sm_policyI11BlinkingLEDJEEEE23process_internal_eventsI11timer_eventNS2_3aux4poolIJEEENSC_IJS8_EEELi0EEEbRKT_RT0_RT1_>:
  bool process_internal_events(const TEvent &event, TDeps &deps, TSubs &subs) {
 8000f84:	b590      	push	{r4, r7, lr}
 8000f86:	b08b      	sub	sp, #44	; 0x2c
 8000f88:	af02      	add	r7, sp, #8
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
 8000f90:	603b      	str	r3, [r7, #0]
    policies::log_process_event<sm_t>(aux::type<logger_t>{}, deps, event);
 8000f92:	f107 0314 	add.w	r3, r7, #20
 8000f96:	68ba      	ldr	r2, [r7, #8]
 8000f98:	6879      	ldr	r1, [r7, #4]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 f858 	bl	8001050 <_ZN5boost3ext3sml6v1_1_54back8policies17log_process_eventI11BlinkingLEDNS2_3aux4poolIJEEE11timer_eventEEvRKNS7_4typeIJNS3_9no_policyEEEERT0_RKT1_>
                                                                                    aux::make_index_sequence<regions>{});
 8000fa0:	f88d 4004 	strb.w	r4, [sp, #4]
 8000fa4:	f107 0318 	add.w	r3, r7, #24
 8000fa8:	9300      	str	r3, [sp, #0]
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	68b9      	ldr	r1, [r7, #8]
 8000fb0:	68f8      	ldr	r0, [r7, #12]
 8000fb2:	f000 f859 	bl	8001068 <_ZN5boost3ext3sml6v1_1_54back7sm_implINS3_9sm_policyI11BlinkingLEDJEEEE18process_event_implINS3_29get_event_mapping_impl_helperI11timer_eventNS8_8mappingsEEESB_NS2_3aux4poolIJEEENSF_IJS8_EEEJNSE_6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc102ELc102EEEENSI_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc115ELc108ELc111ELc119EEEENSI_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEENSI_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc110EEEEEEEbRKT0_RT1_RT2_RKNSE_9type_listIJDpT3_EEENSE_14index_sequenceIJLi0EEEE>
 8000fb6:	4603      	mov	r3, r0
  }
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3724      	adds	r7, #36	; 0x24
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd90      	pop	{r4, r7, pc}

08000fc0 <_ZN5boost3ext3sml6v1_1_54back7sm_implINS3_9sm_policyI11BlinkingLEDJEEEE23process_internal_eventsINS3_9anonymousENS2_3aux4poolIJEEENSC_IJS8_EEEJELi0EEEbRKT_RT0_RT1_DpOT2_>:
  bool process_internal_events(const TEvent &, TDeps &, TSubs &, Ts &&...) {
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
 8000fcc:	603b      	str	r3, [r7, #0]
    return false;
 8000fce:	2300      	movs	r3, #0
  }
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <_ZN5boost3ext3sml6v1_1_54back7sm_implINS3_9sm_policyI11BlinkingLEDJEEEE20process_defer_eventsINS2_3aux4poolIJEEENSB_IJS8_EEEJ11timer_eventEEEbRT_RT0_bRKNSA_4typeIJNS3_9no_policyEEEERKNSA_9type_listIJDpT1_EEE>:
  bool process_defer_events(TDeps &, TSubs &, const bool, const aux::type<no_policy> &, const aux::type_list<TEvents...> &) {
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
 8000fe8:	70fb      	strb	r3, [r7, #3]
    return false;
 8000fea:	2300      	movs	r3, #0
  }
 8000fec:	4618      	mov	r0, r3
 8000fee:	3714      	adds	r7, #20
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <_ZN5boost3ext3sml6v1_1_54back7sm_implINS3_9sm_policyI11BlinkingLEDJEEEE21process_queued_eventsINS2_3aux4poolIJEEENSB_IJS8_EEEJ11timer_eventEEEbRT_RT0_RKNSA_4typeIJNS3_9no_policyEEEERKNSA_9type_listIJDpT1_EEE>:
  bool process_queued_events(TDeps &, TSubs &, const aux::type<no_policy> &, const aux::type_list<TEvents...> &) {
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
 8001004:	603b      	str	r3, [r7, #0]
    return false;
 8001006:	2300      	movs	r3, #0
  }
 8001008:	4618      	mov	r0, r3
 800100a:	3714      	adds	r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <_ZN5boost3ext3sml6v1_1_54back7sm_implINS3_9sm_policyI11BlinkingLEDJEEEEC1INS2_3aux4poolIJEEEEENSA_4initERKT_>:
  sm_impl(aux::init, const TPool &p) : sm_impl{p, aux::is_empty<sm_t>{}} {}
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	7239      	strb	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
 8001020:	461a      	mov	r2, r3
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	68f8      	ldr	r0, [r7, #12]
 8001026:	f000 f848 	bl	80010ba <_ZN5boost3ext3sml6v1_1_54back7sm_implINS3_9sm_policyI11BlinkingLEDJEEEEC1INS2_3aux4poolIJEEEEERKT_NSA_17integral_constantIbLb1EEE>
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	4618      	mov	r0, r3
 800102e:	3718      	adds	r7, #24
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <_ZN5boost3ext3sml6v1_1_54back7sm_implINS3_9sm_policyI11BlinkingLEDJEEEE23process_internal_eventsINS3_8on_entryINS3_1_ENS3_7initialEEENS2_3aux4poolIJEEENSF_IJS8_EEEJELi0EEEbRKT_RT0_RT1_DpOT2_>:
  bool process_internal_events(const TEvent &, TDeps &, TSubs &, Ts &&...) {
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
 8001040:	603b      	str	r3, [r7, #0]
    return false;
 8001042:	2300      	movs	r3, #0
  }
 8001044:	4618      	mov	r0, r3
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <_ZN5boost3ext3sml6v1_1_54back8policies17log_process_eventI11BlinkingLEDNS2_3aux4poolIJEEE11timer_eventEEvRKNS7_4typeIJNS3_9no_policyEEEERT0_RKT1_>:
void log_process_event(const aux::type<no_policy> &, TDeps &, const TEvent &) {}
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
 800105c:	bf00      	nop
 800105e:	3714      	adds	r7, #20
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <_ZN5boost3ext3sml6v1_1_54back7sm_implINS3_9sm_policyI11BlinkingLEDJEEEE18process_event_implINS3_29get_event_mapping_impl_helperI11timer_eventNS8_8mappingsEEESB_NS2_3aux4poolIJEEENSF_IJS8_EEEJNSE_6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc102ELc102EEEENSI_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc115ELc108ELc111ELc119EEEENSI_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEENSI_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc110EEEEEEEbRKT0_RT1_RT2_RKNSE_9type_listIJDpT3_EEENSE_14index_sequenceIJLi0EEEE>:
  bool process_event_impl(const TEvent &event, TDeps &deps, TSubs &subs, const aux::type_list<TStates...> &states,
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af02      	add	r7, sp, #8
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
 8001074:	603b      	str	r3, [r7, #0]
    const auto lock = thread_safety_.create_lock();
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	3301      	adds	r3, #1
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff fa2a 	bl	80004d4 <_ZN5boost3ext3sml6v1_1_54back8policies22thread_safety_policy__11create_lockEv>
    return dispatch_t::template dispatch<0, TMappings>(*this, current_state_[0], event, deps, subs, states);
 8001080:	68f9      	ldr	r1, [r7, #12]
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	9301      	str	r3, [sp, #4]
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	68ba      	ldr	r2, [r7, #8]
 800108e:	68f8      	ldr	r0, [r7, #12]
 8001090:	f000 f82c 	bl	80010ec <_ZN5boost3ext3sml6v1_1_54back8policies10jump_table8dispatchILi0ENS3_29get_event_mapping_impl_helperI11timer_eventNS3_7sm_implINS3_9sm_policyI11BlinkingLEDJEEEE8mappingsEEESD_hS8_NS2_3aux4poolIJEEENSH_IJSD_EEEJNSG_6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc102ELc102EEEENSK_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc115ELc108ELc111ELc119EEEENSK_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEENSK_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc110EEEEEEEbRT1_RT2_RKT3_RT4_RT5_RKNSG_9type_listIJDpT6_EEE>
 8001094:	4603      	mov	r3, r0
  }
 8001096:	4618      	mov	r0, r3
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <_ZNK5boost3ext3sml6v1_1_53aux22missing_ctor_parameterI11BlinkingLEDEclEv>:
  auto operator()() const { return T{}(); }
 800109e:	b580      	push	{r7, lr}
 80010a0:	b084      	sub	sp, #16
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
 80010a6:	f107 030c 	add.w	r3, r7, #12
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff fb22 	bl	80006f4 <_ZN11BlinkingLEDclEv>
 80010b0:	bf00      	nop
 80010b2:	4618      	mov	r0, r3
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <_ZN5boost3ext3sml6v1_1_54back7sm_implINS3_9sm_policyI11BlinkingLEDJEEEEC1INS2_3aux4poolIJEEEEERKT_NSA_17integral_constantIbLb1EEE>:
  sm_impl(const TPool &p, aux::true_type) : transitions_{aux::try_get<sm_t>(&p)()} {
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b086      	sub	sp, #24
 80010be:	af00      	add	r7, sp, #0
 80010c0:	60f8      	str	r0, [r7, #12]
 80010c2:	60b9      	str	r1, [r7, #8]
 80010c4:	713a      	strb	r2, [r7, #4]
 80010c6:	68b8      	ldr	r0, [r7, #8]
 80010c8:	f000 f82c 	bl	8001124 <_ZN5boost3ext3sml6v1_1_53aux7try_getI11BlinkingLEDEENS3_22missing_ctor_parameterIT_EEz>
 80010cc:	f107 0310 	add.w	r3, r7, #16
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ffe4 	bl	800109e <_ZNK5boost3ext3sml6v1_1_53aux22missing_ctor_parameterI11BlinkingLEDEclEv>
    initialize(typename sm_impl<TSM>::initial_states_t{});
 80010d6:	f107 0314 	add.w	r3, r7, #20
 80010da:	4619      	mov	r1, r3
 80010dc:	68f8      	ldr	r0, [r7, #12]
 80010de:	f000 f828 	bl	8001132 <_ZN5boost3ext3sml6v1_1_54back7sm_implINS3_9sm_policyI11BlinkingLEDJEEEE10initializeINS2_3aux6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc102ELc102EEEEEEvRKNSA_9type_listIJT_EEE>
  }
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	4618      	mov	r0, r3
 80010e6:	3718      	adds	r7, #24
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <_ZN5boost3ext3sml6v1_1_54back8policies10jump_table8dispatchILi0ENS3_29get_event_mapping_impl_helperI11timer_eventNS3_7sm_implINS3_9sm_policyI11BlinkingLEDJEEEE8mappingsEEESD_hS8_NS2_3aux4poolIJEEENSH_IJSD_EEEJNSG_6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc102ELc102EEEENSK_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc115ELc108ELc111ELc119EEEENSK_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEENSK_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc110EEEEEEEbRT1_RT2_RKT3_RT4_RT5_RKNSG_9type_listIJDpT6_EEE>:
  static bool dispatch(sm_impl &self, State &current_state, const TEvent &event, TDeps &deps, TSubs &subs,
 80010ec:	b590      	push	{r4, r7, lr}
 80010ee:	b087      	sub	sp, #28
 80010f0:	af02      	add	r7, sp, #8
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
 80010f8:	603b      	str	r3, [r7, #0]
    return dispatch_table[current_state](event, self, deps, subs, current_state);
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	461a      	mov	r2, r3
 8001100:	4b07      	ldr	r3, [pc, #28]	; (8001120 <_ZN5boost3ext3sml6v1_1_54back8policies10jump_table8dispatchILi0ENS3_29get_event_mapping_impl_helperI11timer_eventNS3_7sm_implINS3_9sm_policyI11BlinkingLEDJEEEE8mappingsEEESD_hS8_NS2_3aux4poolIJEEENSH_IJSD_EEEJNSG_6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc102ELc102EEEENSK_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc115ELc108ELc111ELc119EEEENSK_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEENSK_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc110EEEEEEEbRT1_RT2_RKT3_RT4_RT5_RKNSG_9type_listIJDpT6_EEE+0x34>)
 8001102:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	6a3b      	ldr	r3, [r7, #32]
 800110c:	683a      	ldr	r2, [r7, #0]
 800110e:	68f9      	ldr	r1, [r7, #12]
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	47a0      	blx	r4
 8001114:	4603      	mov	r3, r0
  }
 8001116:	4618      	mov	r0, r3
 8001118:	3714      	adds	r7, #20
 800111a:	46bd      	mov	sp, r7
 800111c:	bd90      	pop	{r4, r7, pc}
 800111e:	bf00      	nop
 8001120:	08002f08 	.word	0x08002f08

08001124 <_ZN5boost3ext3sml6v1_1_53aux7try_getI11BlinkingLEDEENS3_22missing_ctor_parameterIT_EEz>:
missing_ctor_parameter<T> try_get(...) {
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
}
 8001128:	4618      	mov	r0, r3
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <_ZN5boost3ext3sml6v1_1_54back7sm_implINS3_9sm_policyI11BlinkingLEDJEEEE10initializeINS2_3aux6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc102ELc102EEEEEEvRKNSA_9type_listIJT_EEE>:
  void initialize(const aux::type_list<TState> &) {
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
 800113a:	6039      	str	r1, [r7, #0]
    current_state_[0] = aux::get_id<state_t, TState>((states_ids_t *)0);
 800113c:	2000      	movs	r0, #0
 800113e:	f000 f874 	bl	800122a <_ZN5boost3ext3sml6v1_1_53aux6get_idIhNS3_6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc102ELc102EEEELi0EEET_PNS3_12type_id_typeIXT1_ET0_EE>
 8001142:	4603      	mov	r3, r0
 8001144:	461a      	mov	r2, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	701a      	strb	r2, [r3, #0]
  }
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <_ZN5boost3ext3sml6v1_1_54back11transitionsIJNS2_5front10transitionIJNS5_5stateINS2_3aux6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc115ELc108ELc111ELc119EEEEEENS7_IFNS9_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc102ELc102EEEENS5_13initial_stateEEEENS5_5eventI11timer_eventEENS5_6alwaysENS5_4noneEEEEEE7executeISH_NS3_7sm_implINS3_9sm_policyI11BlinkingLEDJEEEEENS8_4poolIJEEENST_IJSS_EEEEEbRKT_RT0_RT1_RT2_RNSZ_7state_tE>:
  static bool execute(const TEvent &event, SM &sm, TDeps &deps, TSubs &subs, typename SM::state_t &current_state) {
 8001152:	b590      	push	{r4, r7, lr}
 8001154:	b08b      	sub	sp, #44	; 0x2c
 8001156:	af04      	add	r7, sp, #16
 8001158:	60f8      	str	r0, [r7, #12]
 800115a:	60b9      	str	r1, [r7, #8]
 800115c:	607a      	str	r2, [r7, #4]
 800115e:	603b      	str	r3, [r7, #0]
    return aux::get<T>(sm.transitions_).execute(event, sm, deps, subs, current_state, typename SM::has_entry_exits{});
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	4618      	mov	r0, r3
 8001164:	f000 f86c 	bl	8001240 <_ZN5boost3ext3sml6v1_1_53aux3getINS2_5front10transitionIJNS5_5stateINS3_6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc115ELc108ELc111ELc119EEEEEENS7_IFNS8_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc102ELc102EEEENS5_13initial_stateEEEENS5_5eventI11timer_eventEENS5_6alwaysENS5_4noneEEEENS3_4poolIJSK_NS6_IJNS7_INS8_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEEEESA_SH_SI_SJ_EEENS6_IJNS7_INS8_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc110EEEEEESN_SH_SI_NS3_12zero_wrapperIUlvE_vEEEEENS6_IJNS7_ISB_EESQ_SH_SI_NSR_IUlvE0_vEEEEEEEEEERT_RT0_>
 8001168:	f88d 4008 	strb.w	r4, [sp, #8]
 800116c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800116e:	9301      	str	r3, [sp, #4]
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	68ba      	ldr	r2, [r7, #8]
 8001178:	68f9      	ldr	r1, [r7, #12]
 800117a:	f000 f86c 	bl	8001256 <_ZN5boost3ext3sml6v1_1_55front10transitionIJNS3_5stateINS2_3aux6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc115ELc108ELc111ELc119EEEEEENS5_IFNS7_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc102ELc102EEEENS3_13initial_stateEEEENS3_5eventI11timer_eventEENS3_6alwaysENS3_4noneEEE7executeISF_NS2_4back7sm_implINSL_9sm_policyI11BlinkingLEDJEEEEENS6_4poolIJEEENSR_IJSQ_EEEEEbRKT_RT0_RT1_RT2_RNSX_7state_tENS6_17integral_constantIbLb0EEE>
 800117e:	4603      	mov	r3, r0
  }
 8001180:	4618      	mov	r0, r3
 8001182:	371c      	adds	r7, #28
 8001184:	46bd      	mov	sp, r7
 8001186:	bd90      	pop	{r4, r7, pc}

08001188 <_ZN5boost3ext3sml6v1_1_54back11transitionsIJNS2_5front10transitionIJNS5_5stateINS2_3aux6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEEEENS7_INS9_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc115ELc108ELc111ELc119EEEEEENS5_5eventI11timer_eventEENS5_6alwaysENS5_4noneEEEEEE7executeISF_NS3_7sm_implINS3_9sm_policyI11BlinkingLEDJEEEEENS8_4poolIJEEENSR_IJSQ_EEEEEbRKT_RT0_RT1_RT2_RNSX_7state_tE>:
  static bool execute(const TEvent &event, SM &sm, TDeps &deps, TSubs &subs, typename SM::state_t &current_state) {
 8001188:	b590      	push	{r4, r7, lr}
 800118a:	b08b      	sub	sp, #44	; 0x2c
 800118c:	af04      	add	r7, sp, #16
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
 8001194:	603b      	str	r3, [r7, #0]
    return aux::get<T>(sm.transitions_).execute(event, sm, deps, subs, current_state, typename SM::has_entry_exits{});
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	4618      	mov	r0, r3
 800119a:	f000 f87c 	bl	8001296 <_ZN5boost3ext3sml6v1_1_53aux3getINS2_5front10transitionIJNS5_5stateINS3_6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEEEENS7_INS8_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc115ELc108ELc111ELc119EEEEEENS5_5eventI11timer_eventEENS5_6alwaysENS5_4noneEEEENS3_4poolIJNS6_IJSC_NS7_IFNS8_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc102ELc102EEEENS5_13initial_stateEEEESF_SG_SH_EEESI_NS6_IJNS7_INS8_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc110EEEEEESA_SF_SG_NS3_12zero_wrapperIUlvE_vEEEEENS6_IJNS7_ISK_EESQ_SF_SG_NSR_IUlvE0_vEEEEEEEEEERT_RT0_>
 800119e:	f88d 4008 	strb.w	r4, [sp, #8]
 80011a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011a4:	9301      	str	r3, [sp, #4]
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	68ba      	ldr	r2, [r7, #8]
 80011ae:	68f9      	ldr	r1, [r7, #12]
 80011b0:	f000 f87c 	bl	80012ac <_ZN5boost3ext3sml6v1_1_55front10transitionIJNS3_5stateINS2_3aux6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEEEENS5_INS7_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc115ELc108ELc111ELc119EEEEEENS3_5eventI11timer_eventEENS3_6alwaysENS3_4noneEEE7executeISD_NS2_4back7sm_implINSJ_9sm_policyI11BlinkingLEDJEEEEENS6_4poolIJEEENSP_IJSO_EEEEEbRKT_RT0_RT1_RT2_RNSV_7state_tENS6_17integral_constantIbLb0EEE>
 80011b4:	4603      	mov	r3, r0
  }
 80011b6:	4618      	mov	r0, r3
 80011b8:	371c      	adds	r7, #28
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd90      	pop	{r4, r7, pc}

080011be <_ZN5boost3ext3sml6v1_1_54back11transitionsIJNS2_5front10transitionIJNS5_5stateINS2_3aux6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc110EEEEEENS7_INS9_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEEEENS5_5eventI11timer_eventEENS5_6alwaysENS8_12zero_wrapperIUlvE_vEEEEEEE7executeISF_NS3_7sm_implINS3_9sm_policyI11BlinkingLEDJEEEEENS8_4poolIJEEENST_IJSS_EEEEEbRKT_RT0_RT1_RT2_RNSZ_7state_tE>:
  static bool execute(const TEvent &event, SM &sm, TDeps &deps, TSubs &subs, typename SM::state_t &current_state) {
 80011be:	b590      	push	{r4, r7, lr}
 80011c0:	b08b      	sub	sp, #44	; 0x2c
 80011c2:	af04      	add	r7, sp, #16
 80011c4:	60f8      	str	r0, [r7, #12]
 80011c6:	60b9      	str	r1, [r7, #8]
 80011c8:	607a      	str	r2, [r7, #4]
 80011ca:	603b      	str	r3, [r7, #0]
    return aux::get<T>(sm.transitions_).execute(event, sm, deps, subs, current_state, typename SM::has_entry_exits{});
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f000 f88c 	bl	80012ec <_ZN5boost3ext3sml6v1_1_53aux3getINS2_5front10transitionIJNS5_5stateINS3_6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc110EEEEEENS7_INS8_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEEEENS5_5eventI11timer_eventEENS5_6alwaysENS3_12zero_wrapperIUlvE_vEEEEENS3_4poolIJNS6_IJNS7_INS8_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc115ELc108ELc111ELc119EEEEEENS7_IFNS8_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc102ELc102EEEENS5_13initial_stateEEEESF_SG_NS5_4noneEEEENS6_IJSC_SN_SF_SG_SS_EEESK_NS6_IJNS7_ISO_EESA_SF_SG_NSH_IUlvE0_vEEEEEEEEEERT_RT0_>
 80011d4:	f88d 4008 	strb.w	r4, [sp, #8]
 80011d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011da:	9301      	str	r3, [sp, #4]
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	68f9      	ldr	r1, [r7, #12]
 80011e6:	f000 f8a6 	bl	8001336 <_ZN5boost3ext3sml6v1_1_55front10transitionIJNS3_5stateINS2_3aux6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc110EEEEEENS5_INS7_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEEEENS3_5eventI11timer_eventEENS3_6alwaysENS6_12zero_wrapperIUlvE_vEEEE7executeISD_NS2_4back7sm_implINSL_9sm_policyI11BlinkingLEDJEEEEENS6_4poolIJEEENSR_IJSQ_EEEEEbRKT_RT0_RT1_RT2_RNSX_7state_tENS6_17integral_constantIbLb0EEE>
 80011ea:	4603      	mov	r3, r0
  }
 80011ec:	4618      	mov	r0, r3
 80011ee:	371c      	adds	r7, #28
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd90      	pop	{r4, r7, pc}

080011f4 <_ZN5boost3ext3sml6v1_1_54back11transitionsIJNS2_5front10transitionIJNS5_5stateINS2_3aux6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc102ELc102EEEEEENS7_INS9_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc110EEEEEENS5_5eventI11timer_eventEENS5_6alwaysENS8_12zero_wrapperIUlvE0_vEEEEEEE7executeISF_NS3_7sm_implINS3_9sm_policyI11BlinkingLEDJEEEEENS8_4poolIJEEENST_IJSS_EEEEEbRKT_RT0_RT1_RT2_RNSZ_7state_tE>:
  static bool execute(const TEvent &event, SM &sm, TDeps &deps, TSubs &subs, typename SM::state_t &current_state) {
 80011f4:	b590      	push	{r4, r7, lr}
 80011f6:	b08b      	sub	sp, #44	; 0x2c
 80011f8:	af04      	add	r7, sp, #16
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
 8001200:	603b      	str	r3, [r7, #0]
    return aux::get<T>(sm.transitions_).execute(event, sm, deps, subs, current_state, typename SM::has_entry_exits{});
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	4618      	mov	r0, r3
 8001206:	f000 f8c2 	bl	800138e <_ZN5boost3ext3sml6v1_1_53aux3getINS2_5front10transitionIJNS5_5stateINS3_6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc102ELc102EEEEEENS7_INS8_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc110EEEEEENS5_5eventI11timer_eventEENS5_6alwaysENS3_12zero_wrapperIUlvE0_vEEEEENS3_4poolIJNS6_IJNS7_INS8_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc115ELc108ELc111ELc119EEEEEENS7_IFS9_NS5_13initial_stateEEEESF_SG_NS5_4noneEEEENS6_IJNS7_INS8_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEEEESN_SF_SG_SR_EEENS6_IJSC_SU_SF_SG_NSH_IUlvE_vEEEEESK_EEEEERT_RT0_>
 800120a:	f88d 4008 	strb.w	r4, [sp, #8]
 800120e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001210:	9301      	str	r3, [sp, #4]
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	9300      	str	r3, [sp, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	68ba      	ldr	r2, [r7, #8]
 800121a:	68f9      	ldr	r1, [r7, #12]
 800121c:	f000 f8d1 	bl	80013c2 <_ZN5boost3ext3sml6v1_1_55front10transitionIJNS3_5stateINS2_3aux6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc102ELc102EEEEEENS5_INS7_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc110EEEEEENS3_5eventI11timer_eventEENS3_6alwaysENS6_12zero_wrapperIUlvE0_vEEEE7executeISD_NS2_4back7sm_implINSL_9sm_policyI11BlinkingLEDJEEEEENS6_4poolIJEEENSR_IJSQ_EEEEEbRKT_RT0_RT1_RT2_RNSX_7state_tENS6_17integral_constantIbLb0EEE>
 8001220:	4603      	mov	r3, r0
  }
 8001222:	4618      	mov	r0, r3
 8001224:	371c      	adds	r7, #28
 8001226:	46bd      	mov	sp, r7
 8001228:	bd90      	pop	{r4, r7, pc}

0800122a <_ZN5boost3ext3sml6v1_1_53aux6get_idIhNS3_6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc102ELc102EEEELi0EEET_PNS3_12type_id_typeIXT1_ET0_EE>:
constexpr R get_id(type_id_type<N, T> *) {
 800122a:	b480      	push	{r7}
 800122c:	b083      	sub	sp, #12
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
  return static_cast<R>(N);
 8001232:	2300      	movs	r3, #0
}
 8001234:	4618      	mov	r0, r3
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <_ZN5boost3ext3sml6v1_1_53aux3getINS2_5front10transitionIJNS5_5stateINS3_6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc115ELc108ELc111ELc119EEEEEENS7_IFNS8_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc102ELc102EEEENS5_13initial_stateEEEENS5_5eventI11timer_eventEENS5_6alwaysENS5_4noneEEEENS3_4poolIJSK_NS6_IJNS7_INS8_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEEEESA_SH_SI_SJ_EEENS6_IJNS7_INS8_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc110EEEEEESN_SH_SI_NS3_12zero_wrapperIUlvE_vEEEEENS6_IJNS7_ISB_EESQ_SH_SI_NSR_IUlvE0_vEEEEEEEEEERT_RT0_>:
T &get(TPool &p) {
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  return static_cast<pool_type<T> &>(p).value;
 8001248:	687b      	ldr	r3, [r7, #4]
}
 800124a:	4618      	mov	r0, r3
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <_ZN5boost3ext3sml6v1_1_55front10transitionIJNS3_5stateINS2_3aux6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc115ELc108ELc111ELc119EEEEEENS5_IFNS7_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc102ELc102EEEENS3_13initial_stateEEEENS3_5eventI11timer_eventEENS3_6alwaysENS3_4noneEEE7executeISF_NS2_4back7sm_implINSL_9sm_policyI11BlinkingLEDJEEEEENS6_4poolIJEEENSR_IJSQ_EEEEEbRKT_RT0_RT1_RT2_RNSX_7state_tENS6_17integral_constantIbLb0EEE>:
  bool execute(const TEvent &, SM &sm, TDeps &deps, TSubs &subs, typename SM::state_t &current_state, aux::false_type) {
 8001256:	b580      	push	{r7, lr}
 8001258:	b08c      	sub	sp, #48	; 0x30
 800125a:	af04      	add	r7, sp, #16
 800125c:	60f8      	str	r0, [r7, #12]
 800125e:	60b9      	str	r1, [r7, #8]
 8001260:	607a      	str	r2, [r7, #4]
 8001262:	603b      	str	r3, [r7, #0]
                         aux::get_id<typename SM::state_t, dst_state>((typename SM::states_ids_t *)0), state<src_state>{},
 8001264:	2000      	movs	r0, #0
 8001266:	f7ff fd02 	bl	8000c6e <_ZN5boost3ext3sml6v1_1_53aux6get_idIhNS3_6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc115ELc108ELc111ELc119EEEELi1EEET_PNS3_12type_id_typeIXT1_ET0_EE>
 800126a:	4603      	mov	r3, r0
 800126c:	75fb      	strb	r3, [r7, #23]
    update_current_state(sm, deps, subs, current_state,
 800126e:	f107 031c 	add.w	r3, r7, #28
 8001272:	9302      	str	r3, [sp, #8]
 8001274:	f107 0318 	add.w	r3, r7, #24
 8001278:	9301      	str	r3, [sp, #4]
 800127a:	f107 0317 	add.w	r3, r7, #23
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001282:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001284:	6839      	ldr	r1, [r7, #0]
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f000 f8c7 	bl	800141a <_ZN5boost3ext3sml6v1_1_55front20update_current_stateINS2_4back7sm_implINS5_9sm_policyI11BlinkingLEDJEEEEENS2_3aux4poolIJEEENSC_IJSA_EEENS3_5stateINSB_6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc102ELc102EEEEEENSF_INSG_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc115ELc108ELc111ELc119EEEEEEEEvRT_RT0_RT1_RNSL_7state_tERKSR_RKT2_RKT3_>
    return true;
 800128c:	2301      	movs	r3, #1
  }
 800128e:	4618      	mov	r0, r3
 8001290:	3720      	adds	r7, #32
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <_ZN5boost3ext3sml6v1_1_53aux3getINS2_5front10transitionIJNS5_5stateINS3_6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEEEENS7_INS8_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc115ELc108ELc111ELc119EEEEEENS5_5eventI11timer_eventEENS5_6alwaysENS5_4noneEEEENS3_4poolIJNS6_IJSC_NS7_IFNS8_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc102ELc102EEEENS5_13initial_stateEEEESF_SG_SH_EEESI_NS6_IJNS7_INS8_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc110EEEEEESA_SF_SG_NS3_12zero_wrapperIUlvE_vEEEEENS6_IJNS7_ISK_EESQ_SF_SG_NSR_IUlvE0_vEEEEEEEEEERT_RT0_>:
T &get(TPool &p) {
 8001296:	b480      	push	{r7}
 8001298:	b083      	sub	sp, #12
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
  return static_cast<pool_type<T> &>(p).value;
 800129e:	687b      	ldr	r3, [r7, #4]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <_ZN5boost3ext3sml6v1_1_55front10transitionIJNS3_5stateINS2_3aux6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEEEENS5_INS7_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc115ELc108ELc111ELc119EEEEEENS3_5eventI11timer_eventEENS3_6alwaysENS3_4noneEEE7executeISD_NS2_4back7sm_implINSJ_9sm_policyI11BlinkingLEDJEEEEENS6_4poolIJEEENSP_IJSO_EEEEEbRKT_RT0_RT1_RT2_RNSV_7state_tENS6_17integral_constantIbLb0EEE>:
  bool execute(const TEvent &, SM &sm, TDeps &deps, TSubs &subs, typename SM::state_t &current_state, aux::false_type) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08c      	sub	sp, #48	; 0x30
 80012b0:	af04      	add	r7, sp, #16
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	607a      	str	r2, [r7, #4]
 80012b8:	603b      	str	r3, [r7, #0]
                         aux::get_id<typename SM::state_t, dst_state>((typename SM::states_ids_t *)0), state<src_state>{},
 80012ba:	2000      	movs	r0, #0
 80012bc:	f7ff fcfb 	bl	8000cb6 <_ZN5boost3ext3sml6v1_1_53aux6get_idIhNS3_6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEELi2EEET_PNS3_12type_id_typeIXT1_ET0_EE>
 80012c0:	4603      	mov	r3, r0
 80012c2:	75fb      	strb	r3, [r7, #23]
    update_current_state(sm, deps, subs, current_state,
 80012c4:	f107 031c 	add.w	r3, r7, #28
 80012c8:	9302      	str	r3, [sp, #8]
 80012ca:	f107 0318 	add.w	r3, r7, #24
 80012ce:	9301      	str	r3, [sp, #4]
 80012d0:	f107 0317 	add.w	r3, r7, #23
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012da:	6839      	ldr	r1, [r7, #0]
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f000 f8b4 	bl	800144a <_ZN5boost3ext3sml6v1_1_55front20update_current_stateINS2_4back7sm_implINS5_9sm_policyI11BlinkingLEDJEEEEENS2_3aux4poolIJEEENSC_IJSA_EEENS3_5stateINSB_6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc115ELc108ELc111ELc119EEEEEENSF_INSG_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEEEEEEvRT_RT0_RT1_RNSL_7state_tERKSR_RKT2_RKT3_>
    return true;
 80012e2:	2301      	movs	r3, #1
  }
 80012e4:	4618      	mov	r0, r3
 80012e6:	3720      	adds	r7, #32
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <_ZN5boost3ext3sml6v1_1_53aux3getINS2_5front10transitionIJNS5_5stateINS3_6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc110EEEEEENS7_INS8_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEEEENS5_5eventI11timer_eventEENS5_6alwaysENS3_12zero_wrapperIUlvE_vEEEEENS3_4poolIJNS6_IJNS7_INS8_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc115ELc108ELc111ELc119EEEEEENS7_IFNS8_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc102ELc102EEEENS5_13initial_stateEEEESF_SG_NS5_4noneEEEENS6_IJSC_SN_SF_SG_SS_EEESK_NS6_IJNS7_ISO_EESA_SF_SG_NSH_IUlvE0_vEEEEEEEEEERT_RT0_>:
T &get(TPool &p) {
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  return static_cast<pool_type<T> &>(p).value;
 80012f4:	687b      	ldr	r3, [r7, #4]
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <_ZN5boost3ext3sml6v1_1_53aux6get_idIhNS3_6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc110EEEELi3EEET_PNS3_12type_id_typeIXT1_ET0_EE>:
constexpr R get_id(type_id_type<N, T> *) {
 8001302:	b480      	push	{r7}
 8001304:	b083      	sub	sp, #12
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
  return static_cast<R>(N);
 800130a:	2303      	movs	r3, #3
}
 800130c:	4618      	mov	r0, r3
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <_ZN5boost3ext3sml6v1_1_55front4callI11timer_eventNS2_3aux9type_listIJEEENS2_4back9no_policyEE7executeINS6_12zero_wrapperIUlvE_vEENS9_7sm_implINS9_9sm_policyI11BlinkingLEDJEEEEENS6_4poolIJEEENSL_IJSK_EEEEEDaT_RKS5_RT0_RT1_RT2_>:
  static auto execute(T object, const TEvent &, TSM &, TDeps &, TSubs &) {
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
 8001324:	603b      	str	r3, [r7, #0]
    return object();
 8001326:	f107 0010 	add.w	r0, r7, #16
 800132a:	f7ff f96d 	bl	8000608 <_ZNK5boost3ext3sml6v1_1_53aux17zero_wrapper_implIUlvE_NS3_9type_listIJEEEEclEv>
 800132e:	bf00      	nop
  }
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <_ZN5boost3ext3sml6v1_1_55front10transitionIJNS3_5stateINS2_3aux6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc110EEEEEENS5_INS7_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEEEENS3_5eventI11timer_eventEENS3_6alwaysENS6_12zero_wrapperIUlvE_vEEEE7executeISD_NS2_4back7sm_implINSL_9sm_policyI11BlinkingLEDJEEEEENS6_4poolIJEEENSR_IJSQ_EEEEEbRKT_RT0_RT1_RT2_RNSX_7state_tENS6_17integral_constantIbLb0EEE>:
  bool execute(const TEvent &event, SM &sm, TDeps &deps, TSubs &subs, typename SM::state_t &current_state, aux::false_type) {
 8001336:	b580      	push	{r7, lr}
 8001338:	b08c      	sub	sp, #48	; 0x30
 800133a:	af04      	add	r7, sp, #16
 800133c:	60f8      	str	r0, [r7, #12]
 800133e:	60b9      	str	r1, [r7, #8]
 8001340:	607a      	str	r2, [r7, #4]
 8001342:	603b      	str	r3, [r7, #0]
                         aux::get_id<typename SM::state_t, dst_state>((typename SM::states_ids_t *)0), state<src_state>{},
 8001344:	2000      	movs	r0, #0
 8001346:	f7ff ffdc 	bl	8001302 <_ZN5boost3ext3sml6v1_1_53aux6get_idIhNS3_6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc110EEEELi3EEET_PNS3_12type_id_typeIXT1_ET0_EE>
 800134a:	4603      	mov	r3, r0
 800134c:	75fb      	strb	r3, [r7, #23]
    update_current_state(sm, deps, subs, current_state,
 800134e:	f107 031c 	add.w	r3, r7, #28
 8001352:	9302      	str	r3, [sp, #8]
 8001354:	f107 0318 	add.w	r3, r7, #24
 8001358:	9301      	str	r3, [sp, #4]
 800135a:	f107 0317 	add.w	r3, r7, #23
 800135e:	9300      	str	r3, [sp, #0]
 8001360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001362:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001364:	6839      	ldr	r1, [r7, #0]
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f000 f887 	bl	800147a <_ZN5boost3ext3sml6v1_1_55front20update_current_stateINS2_4back7sm_implINS5_9sm_policyI11BlinkingLEDJEEEEENS2_3aux4poolIJEEENSC_IJSA_EEENS3_5stateINSB_6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEEEENSF_INSG_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc110EEEEEEEEvRT_RT0_RT1_RNSL_7state_tERKSR_RKT2_RKT3_>
    call<TEvent, args_t<A, TEvent>, typename SM::logger_t>::execute(a, event, sm, deps, subs);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4619      	mov	r1, r3
 8001370:	f107 0020 	add.w	r0, r7, #32
 8001374:	f000 f899 	bl	80014aa <_ZN5boost3ext3sml6v1_1_53aux12zero_wrapperIUlvE_vEC1IJRS6_EEEDpOT_>
 8001378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800137a:	683a      	ldr	r2, [r7, #0]
 800137c:	6879      	ldr	r1, [r7, #4]
 800137e:	68b8      	ldr	r0, [r7, #8]
 8001380:	f7ff ffca 	bl	8001318 <_ZN5boost3ext3sml6v1_1_55front4callI11timer_eventNS2_3aux9type_listIJEEENS2_4back9no_policyEE7executeINS6_12zero_wrapperIUlvE_vEENS9_7sm_implINS9_9sm_policyI11BlinkingLEDJEEEEENS6_4poolIJEEENSL_IJSK_EEEEEDaT_RKS5_RT0_RT1_RT2_>
    return true;
 8001384:	2301      	movs	r3, #1
  }
 8001386:	4618      	mov	r0, r3
 8001388:	3720      	adds	r7, #32
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <_ZN5boost3ext3sml6v1_1_53aux3getINS2_5front10transitionIJNS5_5stateINS3_6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc102ELc102EEEEEENS7_INS8_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc110EEEEEENS5_5eventI11timer_eventEENS5_6alwaysENS3_12zero_wrapperIUlvE0_vEEEEENS3_4poolIJNS6_IJNS7_INS8_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc115ELc108ELc111ELc119EEEEEENS7_IFS9_NS5_13initial_stateEEEESF_SG_NS5_4noneEEEENS6_IJNS7_INS8_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEEEESN_SF_SG_SR_EEENS6_IJSC_SU_SF_SG_NSH_IUlvE_vEEEEESK_EEEEERT_RT0_>:
T &get(TPool &p) {
 800138e:	b480      	push	{r7}
 8001390:	b083      	sub	sp, #12
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
  return static_cast<pool_type<T> &>(p).value;
 8001396:	687b      	ldr	r3, [r7, #4]
}
 8001398:	4618      	mov	r0, r3
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <_ZN5boost3ext3sml6v1_1_55front4callI11timer_eventNS2_3aux9type_listIJEEENS2_4back9no_policyEE7executeINS6_12zero_wrapperIUlvE0_vEENS9_7sm_implINS9_9sm_policyI11BlinkingLEDJEEEEENS6_4poolIJEEENSL_IJSK_EEEEEDaT_RKS5_RT0_RT1_RT2_>:
  static auto execute(T object, const TEvent &, TSM &, TDeps &, TSubs &) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
 80013b0:	603b      	str	r3, [r7, #0]
    return object();
 80013b2:	f107 0010 	add.w	r0, r7, #16
 80013b6:	f7ff f96a 	bl	800068e <_ZNK5boost3ext3sml6v1_1_53aux17zero_wrapper_implIUlvE0_NS3_9type_listIJEEEEclEv>
 80013ba:	bf00      	nop
  }
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <_ZN5boost3ext3sml6v1_1_55front10transitionIJNS3_5stateINS2_3aux6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc102ELc102EEEEEENS5_INS7_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc110EEEEEENS3_5eventI11timer_eventEENS3_6alwaysENS6_12zero_wrapperIUlvE0_vEEEE7executeISD_NS2_4back7sm_implINSL_9sm_policyI11BlinkingLEDJEEEEENS6_4poolIJEEENSR_IJSQ_EEEEEbRKT_RT0_RT1_RT2_RNSX_7state_tENS6_17integral_constantIbLb0EEE>:
  bool execute(const TEvent &event, SM &sm, TDeps &deps, TSubs &subs, typename SM::state_t &current_state, aux::false_type) {
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b08c      	sub	sp, #48	; 0x30
 80013c6:	af04      	add	r7, sp, #16
 80013c8:	60f8      	str	r0, [r7, #12]
 80013ca:	60b9      	str	r1, [r7, #8]
 80013cc:	607a      	str	r2, [r7, #4]
 80013ce:	603b      	str	r3, [r7, #0]
                         aux::get_id<typename SM::state_t, dst_state>((typename SM::states_ids_t *)0), state<src_state>{},
 80013d0:	2000      	movs	r0, #0
 80013d2:	f7ff ff2a 	bl	800122a <_ZN5boost3ext3sml6v1_1_53aux6get_idIhNS3_6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc102ELc102EEEELi0EEET_PNS3_12type_id_typeIXT1_ET0_EE>
 80013d6:	4603      	mov	r3, r0
 80013d8:	75fb      	strb	r3, [r7, #23]
    update_current_state(sm, deps, subs, current_state,
 80013da:	f107 031c 	add.w	r3, r7, #28
 80013de:	9302      	str	r3, [sp, #8]
 80013e0:	f107 0318 	add.w	r3, r7, #24
 80013e4:	9301      	str	r3, [sp, #4]
 80013e6:	f107 0317 	add.w	r3, r7, #23
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013f0:	6839      	ldr	r1, [r7, #0]
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f000 f865 	bl	80014c2 <_ZN5boost3ext3sml6v1_1_55front20update_current_stateINS2_4back7sm_implINS5_9sm_policyI11BlinkingLEDJEEEEENS2_3aux4poolIJEEENSC_IJSA_EEENS3_5stateINSB_6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc110EEEEEENSF_INSG_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc102ELc102EEEEEEEEvRT_RT0_RT1_RNSL_7state_tERKSR_RKT2_RKT3_>
    call<TEvent, args_t<A, TEvent>, typename SM::logger_t>::execute(a, event, sm, deps, subs);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	4619      	mov	r1, r3
 80013fc:	f107 0020 	add.w	r0, r7, #32
 8001400:	f000 f877 	bl	80014f2 <_ZN5boost3ext3sml6v1_1_53aux12zero_wrapperIUlvE0_vEC1IJRS6_EEEDpOT_>
 8001404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	6879      	ldr	r1, [r7, #4]
 800140a:	68b8      	ldr	r0, [r7, #8]
 800140c:	f7ff ffca 	bl	80013a4 <_ZN5boost3ext3sml6v1_1_55front4callI11timer_eventNS2_3aux9type_listIJEEENS2_4back9no_policyEE7executeINS6_12zero_wrapperIUlvE0_vEENS9_7sm_implINS9_9sm_policyI11BlinkingLEDJEEEEENS6_4poolIJEEENSL_IJSK_EEEEEDaT_RKS5_RT0_RT1_RT2_>
    return true;
 8001410:	2301      	movs	r3, #1
  }
 8001412:	4618      	mov	r0, r3
 8001414:	3720      	adds	r7, #32
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <_ZN5boost3ext3sml6v1_1_55front20update_current_stateINS2_4back7sm_implINS5_9sm_policyI11BlinkingLEDJEEEEENS2_3aux4poolIJEEENSC_IJSA_EEENS3_5stateINSB_6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc102ELc102EEEEEENSF_INSG_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc115ELc108ELc111ELc119EEEEEEEEvRT_RT0_RT1_RNSL_7state_tERKSR_RKT2_RKT3_>:
void update_current_state(SM &, TDeps &deps, TSubs &, typename SM::state_t &current_state,
 800141a:	b580      	push	{r7, lr}
 800141c:	b088      	sub	sp, #32
 800141e:	af00      	add	r7, sp, #0
 8001420:	60f8      	str	r0, [r7, #12]
 8001422:	60b9      	str	r1, [r7, #8]
 8001424:	607a      	str	r2, [r7, #4]
 8001426:	603b      	str	r3, [r7, #0]
  back::policies::log_state_change<typename SM::sm_t>(aux::type<typename SM::logger_t>{}, deps,
 8001428:	f107 031c 	add.w	r3, r7, #28
 800142c:	f107 0218 	add.w	r2, r7, #24
 8001430:	f107 0014 	add.w	r0, r7, #20
 8001434:	68b9      	ldr	r1, [r7, #8]
 8001436:	f000 f868 	bl	800150a <_ZN5boost3ext3sml6v1_1_54back8policies16log_state_changeI11BlinkingLEDNS2_3aux4poolIJEEENS7_6stringINSA_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc102ELc102EEEEJEEENSA_INSA_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc115ELc108ELc111ELc119EEEEJEEEEEvRKNS7_4typeIJNS3_9no_policyEEEERT0_RKT1_RKT2_>
  current_state = new_state;
 800143a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800143c:	781a      	ldrb	r2, [r3, #0]
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	701a      	strb	r2, [r3, #0]
}
 8001442:	bf00      	nop
 8001444:	3720      	adds	r7, #32
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <_ZN5boost3ext3sml6v1_1_55front20update_current_stateINS2_4back7sm_implINS5_9sm_policyI11BlinkingLEDJEEEEENS2_3aux4poolIJEEENSC_IJSA_EEENS3_5stateINSB_6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc115ELc108ELc111ELc119EEEEEENSF_INSG_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEEEEEEvRT_RT0_RT1_RNSL_7state_tERKSR_RKT2_RKT3_>:
void update_current_state(SM &, TDeps &deps, TSubs &, typename SM::state_t &current_state,
 800144a:	b580      	push	{r7, lr}
 800144c:	b088      	sub	sp, #32
 800144e:	af00      	add	r7, sp, #0
 8001450:	60f8      	str	r0, [r7, #12]
 8001452:	60b9      	str	r1, [r7, #8]
 8001454:	607a      	str	r2, [r7, #4]
 8001456:	603b      	str	r3, [r7, #0]
  back::policies::log_state_change<typename SM::sm_t>(aux::type<typename SM::logger_t>{}, deps,
 8001458:	f107 031c 	add.w	r3, r7, #28
 800145c:	f107 0218 	add.w	r2, r7, #24
 8001460:	f107 0014 	add.w	r0, r7, #20
 8001464:	68b9      	ldr	r1, [r7, #8]
 8001466:	f000 f85d 	bl	8001524 <_ZN5boost3ext3sml6v1_1_54back8policies16log_state_changeI11BlinkingLEDNS2_3aux4poolIJEEENS7_6stringINSA_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc115ELc108ELc111ELc119EEEEJEEENSA_INSA_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEEJEEEEEvRKNS7_4typeIJNS3_9no_policyEEEERT0_RKT1_RKT2_>
  current_state = new_state;
 800146a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800146c:	781a      	ldrb	r2, [r3, #0]
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	701a      	strb	r2, [r3, #0]
}
 8001472:	bf00      	nop
 8001474:	3720      	adds	r7, #32
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <_ZN5boost3ext3sml6v1_1_55front20update_current_stateINS2_4back7sm_implINS5_9sm_policyI11BlinkingLEDJEEEEENS2_3aux4poolIJEEENSC_IJSA_EEENS3_5stateINSB_6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEEEENSF_INSG_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc110EEEEEEEEvRT_RT0_RT1_RNSL_7state_tERKSR_RKT2_RKT3_>:
void update_current_state(SM &, TDeps &deps, TSubs &, typename SM::state_t &current_state,
 800147a:	b580      	push	{r7, lr}
 800147c:	b088      	sub	sp, #32
 800147e:	af00      	add	r7, sp, #0
 8001480:	60f8      	str	r0, [r7, #12]
 8001482:	60b9      	str	r1, [r7, #8]
 8001484:	607a      	str	r2, [r7, #4]
 8001486:	603b      	str	r3, [r7, #0]
  back::policies::log_state_change<typename SM::sm_t>(aux::type<typename SM::logger_t>{}, deps,
 8001488:	f107 031c 	add.w	r3, r7, #28
 800148c:	f107 0218 	add.w	r2, r7, #24
 8001490:	f107 0014 	add.w	r0, r7, #20
 8001494:	68b9      	ldr	r1, [r7, #8]
 8001496:	f000 f852 	bl	800153e <_ZN5boost3ext3sml6v1_1_54back8policies16log_state_changeI11BlinkingLEDNS2_3aux4poolIJEEENS7_6stringINSA_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEEJEEENSA_INSA_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc110EEEEJEEEEEvRKNS7_4typeIJNS3_9no_policyEEEERT0_RKT1_RKT2_>
  current_state = new_state;
 800149a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800149c:	781a      	ldrb	r2, [r3, #0]
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	701a      	strb	r2, [r3, #0]
}
 80014a2:	bf00      	nop
 80014a4:	3720      	adds	r7, #32
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <_ZN5boost3ext3sml6v1_1_53aux12zero_wrapperIUlvE_vEC1IJRS6_EEEDpOT_>:
  zero_wrapper(Ts &&...) {}
 80014aa:	b480      	push	{r7}
 80014ac:	b083      	sub	sp, #12
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
 80014b2:	6039      	str	r1, [r7, #0]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4618      	mov	r0, r3
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <_ZN5boost3ext3sml6v1_1_55front20update_current_stateINS2_4back7sm_implINS5_9sm_policyI11BlinkingLEDJEEEEENS2_3aux4poolIJEEENSC_IJSA_EEENS3_5stateINSB_6stringIcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc110EEEEEENSF_INSG_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc102ELc102EEEEEEEEvRT_RT0_RT1_RNSL_7state_tERKSR_RKT2_RKT3_>:
void update_current_state(SM &, TDeps &deps, TSubs &, typename SM::state_t &current_state,
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b088      	sub	sp, #32
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	60f8      	str	r0, [r7, #12]
 80014ca:	60b9      	str	r1, [r7, #8]
 80014cc:	607a      	str	r2, [r7, #4]
 80014ce:	603b      	str	r3, [r7, #0]
  back::policies::log_state_change<typename SM::sm_t>(aux::type<typename SM::logger_t>{}, deps,
 80014d0:	f107 031c 	add.w	r3, r7, #28
 80014d4:	f107 0218 	add.w	r2, r7, #24
 80014d8:	f107 0014 	add.w	r0, r7, #20
 80014dc:	68b9      	ldr	r1, [r7, #8]
 80014de:	f000 f83b 	bl	8001558 <_ZN5boost3ext3sml6v1_1_54back8policies16log_state_changeI11BlinkingLEDNS2_3aux4poolIJEEENS7_6stringINSA_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc110EEEEJEEENSA_INSA_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc102ELc102EEEEJEEEEEvRKNS7_4typeIJNS3_9no_policyEEEERT0_RKT1_RKT2_>
  current_state = new_state;
 80014e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014e4:	781a      	ldrb	r2, [r3, #0]
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	701a      	strb	r2, [r3, #0]
}
 80014ea:	bf00      	nop
 80014ec:	3720      	adds	r7, #32
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <_ZN5boost3ext3sml6v1_1_53aux12zero_wrapperIUlvE0_vEC1IJRS6_EEEDpOT_>:
  zero_wrapper(Ts &&...) {}
 80014f2:	b480      	push	{r7}
 80014f4:	b083      	sub	sp, #12
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
 80014fa:	6039      	str	r1, [r7, #0]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4618      	mov	r0, r3
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <_ZN5boost3ext3sml6v1_1_54back8policies16log_state_changeI11BlinkingLEDNS2_3aux4poolIJEEENS7_6stringINSA_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc102ELc102EEEEJEEENSA_INSA_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc115ELc108ELc111ELc119EEEEJEEEEEvRKNS7_4typeIJNS3_9no_policyEEEERT0_RKT1_RKT2_>:
void log_state_change(const aux::type<no_policy> &, TDeps &, const TSrcState &, const TDstState &) {}
 800150a:	b480      	push	{r7}
 800150c:	b085      	sub	sp, #20
 800150e:	af00      	add	r7, sp, #0
 8001510:	60f8      	str	r0, [r7, #12]
 8001512:	60b9      	str	r1, [r7, #8]
 8001514:	607a      	str	r2, [r7, #4]
 8001516:	603b      	str	r3, [r7, #0]
 8001518:	bf00      	nop
 800151a:	3714      	adds	r7, #20
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <_ZN5boost3ext3sml6v1_1_54back8policies16log_state_changeI11BlinkingLEDNS2_3aux4poolIJEEENS7_6stringINSA_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc115ELc108ELc111ELc119EEEEJEEENSA_INSA_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEEJEEEEEvRKNS7_4typeIJNS3_9no_policyEEEERT0_RKT1_RKT2_>:
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
 8001530:	603b      	str	r3, [r7, #0]
 8001532:	bf00      	nop
 8001534:	3714      	adds	r7, #20
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr

0800153e <_ZN5boost3ext3sml6v1_1_54back8policies16log_state_changeI11BlinkingLEDNS2_3aux4poolIJEEENS7_6stringINSA_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc98ELc108ELc105ELc110ELc107ELc105ELc110ELc103ELc95ELc102ELc97ELc115ELc116EEEEJEEENSA_INSA_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc110EEEEJEEEEEvRKNS7_4typeIJNS3_9no_policyEEEERT0_RKT1_RKT2_>:
 800153e:	b480      	push	{r7}
 8001540:	b085      	sub	sp, #20
 8001542:	af00      	add	r7, sp, #0
 8001544:	60f8      	str	r0, [r7, #12]
 8001546:	60b9      	str	r1, [r7, #8]
 8001548:	607a      	str	r2, [r7, #4]
 800154a:	603b      	str	r3, [r7, #0]
 800154c:	bf00      	nop
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <_ZN5boost3ext3sml6v1_1_54back8policies16log_state_changeI11BlinkingLEDNS2_3aux4poolIJEEENS7_6stringINSA_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc110EEEEJEEENSA_INSA_IcJLc115ELc116ELc97ELc116ELc101ELc95ELc108ELc101ELc100ELc95ELc111ELc102ELc102EEEEJEEEEEvRKNS7_4typeIJNS3_9no_policyEEEERT0_RKT1_RKT2_>:
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
 8001564:	603b      	str	r3, [r7, #0]
 8001566:	bf00      	nop
 8001568:	3714      	adds	r7, #20
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
	...

08001574 <_Z41__static_initialization_and_destruction_0ii>:
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d107      	bne.n	8001594 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800158a:	4293      	cmp	r3, r2
 800158c:	d102      	bne.n	8001594 <_Z41__static_initialization_and_destruction_0ii+0x20>
sm<BlinkingLED> state_machine;
 800158e:	4803      	ldr	r0, [pc, #12]	; (800159c <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8001590:	f7ff fb3a 	bl	8000c08 <_ZN5boost3ext3sml6v1_1_54back2smINS3_9sm_policyI11BlinkingLEDJEEEEC1Ev>
}
 8001594:	bf00      	nop
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000070 	.word	0x20000070

080015a0 <_GLOBAL__sub_I_htim2>:
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80015a8:	2001      	movs	r0, #1
 80015aa:	f7ff ffe3 	bl	8001574 <_Z41__static_initialization_and_destruction_0ii>
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	607b      	str	r3, [r7, #4]
 80015ba:	4b10      	ldr	r3, [pc, #64]	; (80015fc <HAL_MspInit+0x4c>)
 80015bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015be:	4a0f      	ldr	r2, [pc, #60]	; (80015fc <HAL_MspInit+0x4c>)
 80015c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015c4:	6453      	str	r3, [r2, #68]	; 0x44
 80015c6:	4b0d      	ldr	r3, [pc, #52]	; (80015fc <HAL_MspInit+0x4c>)
 80015c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ce:	607b      	str	r3, [r7, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	603b      	str	r3, [r7, #0]
 80015d6:	4b09      	ldr	r3, [pc, #36]	; (80015fc <HAL_MspInit+0x4c>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	4a08      	ldr	r2, [pc, #32]	; (80015fc <HAL_MspInit+0x4c>)
 80015dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e0:	6413      	str	r3, [r2, #64]	; 0x40
 80015e2:	4b06      	ldr	r3, [pc, #24]	; (80015fc <HAL_MspInit+0x4c>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ea:	603b      	str	r3, [r7, #0]
 80015ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	40023800 	.word	0x40023800

08001600 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001610:	d115      	bne.n	800163e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <HAL_TIM_Base_MspInit+0x48>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	4a0b      	ldr	r2, [pc, #44]	; (8001648 <HAL_TIM_Base_MspInit+0x48>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	6413      	str	r3, [r2, #64]	; 0x40
 8001622:	4b09      	ldr	r3, [pc, #36]	; (8001648 <HAL_TIM_Base_MspInit+0x48>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800162e:	2200      	movs	r2, #0
 8001630:	2100      	movs	r1, #0
 8001632:	201c      	movs	r0, #28
 8001634:	f000 f9f3 	bl	8001a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001638:	201c      	movs	r0, #28
 800163a:	f000 fa0c 	bl	8001a56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800163e:	bf00      	nop
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40023800 	.word	0x40023800

0800164c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr

0800165a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800165e:	e7fe      	b.n	800165e <HardFault_Handler+0x4>

08001660 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001664:	e7fe      	b.n	8001664 <MemManage_Handler+0x4>

08001666 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800166a:	e7fe      	b.n	800166a <BusFault_Handler+0x4>

0800166c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001670:	e7fe      	b.n	8001670 <UsageFault_Handler+0x4>

08001672 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001672:	b480      	push	{r7}
 8001674:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800168e:	b480      	push	{r7}
 8001690:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016a0:	f000 f8a0 	bl	80017e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016a4:	bf00      	nop
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016ac:	4803      	ldr	r0, [pc, #12]	; (80016bc <TIM2_IRQHandler+0x14>)
 80016ae:	f001 f83f 	bl	8002730 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  process_timer_event();
 80016b2:	f7ff f88d 	bl	80007d0 <process_timer_event>

  /* USER CODE END TIM2_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000028 	.word	0x20000028

080016c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016c4:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <SystemInit+0x28>)
 80016c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ca:	4a07      	ldr	r2, [pc, #28]	; (80016e8 <SystemInit+0x28>)
 80016cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016d4:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <SystemInit+0x28>)
 80016d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016da:	609a      	str	r2, [r3, #8]
#endif
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001724 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80016f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80016f2:	e003      	b.n	80016fc <LoopCopyDataInit>

080016f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80016f4:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80016f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80016f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80016fa:	3104      	adds	r1, #4

080016fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80016fc:	480b      	ldr	r0, [pc, #44]	; (800172c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80016fe:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001700:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001702:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001704:	d3f6      	bcc.n	80016f4 <CopyDataInit>
  ldr  r2, =_sbss
 8001706:	4a0b      	ldr	r2, [pc, #44]	; (8001734 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001708:	e002      	b.n	8001710 <LoopFillZerobss>

0800170a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800170a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800170c:	f842 3b04 	str.w	r3, [r2], #4

08001710 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001710:	4b09      	ldr	r3, [pc, #36]	; (8001738 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001712:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001714:	d3f9      	bcc.n	800170a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001716:	f7ff ffd3 	bl	80016c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800171a:	f001 fbbd 	bl	8002e98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800171e:	f7ff f865 	bl	80007ec <main>
  bx  lr    
 8001722:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001724:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8001728:	08002f40 	.word	0x08002f40
  ldr  r0, =_sdata
 800172c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001730:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001734:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001738:	20000078 	.word	0x20000078

0800173c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800173c:	e7fe      	b.n	800173c <ADC_IRQHandler>
	...

08001740 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001744:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <HAL_Init+0x40>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a0d      	ldr	r2, [pc, #52]	; (8001780 <HAL_Init+0x40>)
 800174a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800174e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001750:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <HAL_Init+0x40>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a0a      	ldr	r2, [pc, #40]	; (8001780 <HAL_Init+0x40>)
 8001756:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800175a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800175c:	4b08      	ldr	r3, [pc, #32]	; (8001780 <HAL_Init+0x40>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a07      	ldr	r2, [pc, #28]	; (8001780 <HAL_Init+0x40>)
 8001762:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001766:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001768:	2003      	movs	r0, #3
 800176a:	f000 f94d 	bl	8001a08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800176e:	2000      	movs	r0, #0
 8001770:	f000 f808 	bl	8001784 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001774:	f7ff ff1c 	bl	80015b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40023c00 	.word	0x40023c00

08001784 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800178c:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <HAL_InitTick+0x54>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	4b12      	ldr	r3, [pc, #72]	; (80017dc <HAL_InitTick+0x58>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	4619      	mov	r1, r3
 8001796:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800179a:	fbb3 f3f1 	udiv	r3, r3, r1
 800179e:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a2:	4618      	mov	r0, r3
 80017a4:	f000 f965 	bl	8001a72 <HAL_SYSTICK_Config>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e00e      	b.n	80017d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2b0f      	cmp	r3, #15
 80017b6:	d80a      	bhi.n	80017ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017b8:	2200      	movs	r2, #0
 80017ba:	6879      	ldr	r1, [r7, #4]
 80017bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017c0:	f000 f92d 	bl	8001a1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017c4:	4a06      	ldr	r2, [pc, #24]	; (80017e0 <HAL_InitTick+0x5c>)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017ca:	2300      	movs	r3, #0
 80017cc:	e000      	b.n	80017d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	20000000 	.word	0x20000000
 80017dc:	20000008 	.word	0x20000008
 80017e0:	20000004 	.word	0x20000004

080017e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017e8:	4b06      	ldr	r3, [pc, #24]	; (8001804 <HAL_IncTick+0x20>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	461a      	mov	r2, r3
 80017ee:	4b06      	ldr	r3, [pc, #24]	; (8001808 <HAL_IncTick+0x24>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4413      	add	r3, r2
 80017f4:	4a04      	ldr	r2, [pc, #16]	; (8001808 <HAL_IncTick+0x24>)
 80017f6:	6013      	str	r3, [r2, #0]
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	20000008 	.word	0x20000008
 8001808:	20000074 	.word	0x20000074

0800180c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  return uwTick;
 8001810:	4b03      	ldr	r3, [pc, #12]	; (8001820 <HAL_GetTick+0x14>)
 8001812:	681b      	ldr	r3, [r3, #0]
}
 8001814:	4618      	mov	r0, r3
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	20000074 	.word	0x20000074

08001824 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800182c:	f7ff ffee 	bl	800180c <HAL_GetTick>
 8001830:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800183c:	d005      	beq.n	800184a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800183e:	4b09      	ldr	r3, [pc, #36]	; (8001864 <HAL_Delay+0x40>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	461a      	mov	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	4413      	add	r3, r2
 8001848:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800184a:	bf00      	nop
 800184c:	f7ff ffde 	bl	800180c <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	429a      	cmp	r2, r3
 800185a:	d8f7      	bhi.n	800184c <HAL_Delay+0x28>
  {
  }
}
 800185c:	bf00      	nop
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20000008 	.word	0x20000008

08001868 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001878:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <__NVIC_SetPriorityGrouping+0x44>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800187e:	68ba      	ldr	r2, [r7, #8]
 8001880:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001884:	4013      	ands	r3, r2
 8001886:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001890:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001898:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800189a:	4a04      	ldr	r2, [pc, #16]	; (80018ac <__NVIC_SetPriorityGrouping+0x44>)
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	60d3      	str	r3, [r2, #12]
}
 80018a0:	bf00      	nop
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018b4:	4b04      	ldr	r3, [pc, #16]	; (80018c8 <__NVIC_GetPriorityGrouping+0x18>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	0a1b      	lsrs	r3, r3, #8
 80018ba:	f003 0307 	and.w	r3, r3, #7
}
 80018be:	4618      	mov	r0, r3
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	db0b      	blt.n	80018f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	f003 021f 	and.w	r2, r3, #31
 80018e4:	4907      	ldr	r1, [pc, #28]	; (8001904 <__NVIC_EnableIRQ+0x38>)
 80018e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ea:	095b      	lsrs	r3, r3, #5
 80018ec:	2001      	movs	r0, #1
 80018ee:	fa00 f202 	lsl.w	r2, r0, r2
 80018f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	e000e100 	.word	0xe000e100

08001908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	6039      	str	r1, [r7, #0]
 8001912:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001918:	2b00      	cmp	r3, #0
 800191a:	db0a      	blt.n	8001932 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	b2da      	uxtb	r2, r3
 8001920:	490c      	ldr	r1, [pc, #48]	; (8001954 <__NVIC_SetPriority+0x4c>)
 8001922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001926:	0112      	lsls	r2, r2, #4
 8001928:	b2d2      	uxtb	r2, r2
 800192a:	440b      	add	r3, r1
 800192c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001930:	e00a      	b.n	8001948 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	b2da      	uxtb	r2, r3
 8001936:	4908      	ldr	r1, [pc, #32]	; (8001958 <__NVIC_SetPriority+0x50>)
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	f003 030f 	and.w	r3, r3, #15
 800193e:	3b04      	subs	r3, #4
 8001940:	0112      	lsls	r2, r2, #4
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	440b      	add	r3, r1
 8001946:	761a      	strb	r2, [r3, #24]
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	e000e100 	.word	0xe000e100
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800195c:	b480      	push	{r7}
 800195e:	b089      	sub	sp, #36	; 0x24
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	f1c3 0307 	rsb	r3, r3, #7
 8001976:	2b04      	cmp	r3, #4
 8001978:	bf28      	it	cs
 800197a:	2304      	movcs	r3, #4
 800197c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	3304      	adds	r3, #4
 8001982:	2b06      	cmp	r3, #6
 8001984:	d902      	bls.n	800198c <NVIC_EncodePriority+0x30>
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	3b03      	subs	r3, #3
 800198a:	e000      	b.n	800198e <NVIC_EncodePriority+0x32>
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001990:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43da      	mvns	r2, r3
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	401a      	ands	r2, r3
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	fa01 f303 	lsl.w	r3, r1, r3
 80019ae:	43d9      	mvns	r1, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b4:	4313      	orrs	r3, r2
         );
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3724      	adds	r7, #36	; 0x24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
	...

080019c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019d4:	d301      	bcc.n	80019da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019d6:	2301      	movs	r3, #1
 80019d8:	e00f      	b.n	80019fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019da:	4a0a      	ldr	r2, [pc, #40]	; (8001a04 <SysTick_Config+0x40>)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3b01      	subs	r3, #1
 80019e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019e2:	210f      	movs	r1, #15
 80019e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019e8:	f7ff ff8e 	bl	8001908 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019ec:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <SysTick_Config+0x40>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019f2:	4b04      	ldr	r3, [pc, #16]	; (8001a04 <SysTick_Config+0x40>)
 80019f4:	2207      	movs	r2, #7
 80019f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	e000e010 	.word	0xe000e010

08001a08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f7ff ff29 	bl	8001868 <__NVIC_SetPriorityGrouping>
}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b086      	sub	sp, #24
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	4603      	mov	r3, r0
 8001a26:	60b9      	str	r1, [r7, #8]
 8001a28:	607a      	str	r2, [r7, #4]
 8001a2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a30:	f7ff ff3e 	bl	80018b0 <__NVIC_GetPriorityGrouping>
 8001a34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	68b9      	ldr	r1, [r7, #8]
 8001a3a:	6978      	ldr	r0, [r7, #20]
 8001a3c:	f7ff ff8e 	bl	800195c <NVIC_EncodePriority>
 8001a40:	4602      	mov	r2, r0
 8001a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a46:	4611      	mov	r1, r2
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff5d 	bl	8001908 <__NVIC_SetPriority>
}
 8001a4e:	bf00      	nop
 8001a50:	3718      	adds	r7, #24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff ff31 	bl	80018cc <__NVIC_EnableIRQ>
}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b082      	sub	sp, #8
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7ff ffa2 	bl	80019c4 <SysTick_Config>
 8001a80:	4603      	mov	r3, r0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
	...

08001a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b089      	sub	sp, #36	; 0x24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61fb      	str	r3, [r7, #28]
 8001aa6:	e159      	b.n	8001d5c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	697a      	ldr	r2, [r7, #20]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	f040 8148 	bne.w	8001d56 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d00b      	beq.n	8001ae6 <HAL_GPIO_Init+0x5a>
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d007      	beq.n	8001ae6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ada:	2b11      	cmp	r3, #17
 8001adc:	d003      	beq.n	8001ae6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b12      	cmp	r3, #18
 8001ae4:	d130      	bne.n	8001b48 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	2203      	movs	r2, #3
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	43db      	mvns	r3, r3
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4013      	ands	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	68da      	ldr	r2, [r3, #12]
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	43db      	mvns	r3, r3
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	091b      	lsrs	r3, r3, #4
 8001b32:	f003 0201 	and.w	r2, r3, #1
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	2203      	movs	r2, #3
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	689a      	ldr	r2, [r3, #8]
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d003      	beq.n	8001b88 <HAL_GPIO_Init+0xfc>
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	2b12      	cmp	r3, #18
 8001b86:	d123      	bne.n	8001bd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	08da      	lsrs	r2, r3, #3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3208      	adds	r2, #8
 8001b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	f003 0307 	and.w	r3, r3, #7
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	220f      	movs	r2, #15
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	691a      	ldr	r2, [r3, #16]
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	08da      	lsrs	r2, r3, #3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	3208      	adds	r2, #8
 8001bca:	69b9      	ldr	r1, [r7, #24]
 8001bcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	2203      	movs	r2, #3
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4013      	ands	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 0203 	and.w	r2, r3, #3
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f000 80a2 	beq.w	8001d56 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	4b56      	ldr	r3, [pc, #344]	; (8001d70 <HAL_GPIO_Init+0x2e4>)
 8001c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1a:	4a55      	ldr	r2, [pc, #340]	; (8001d70 <HAL_GPIO_Init+0x2e4>)
 8001c1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c20:	6453      	str	r3, [r2, #68]	; 0x44
 8001c22:	4b53      	ldr	r3, [pc, #332]	; (8001d70 <HAL_GPIO_Init+0x2e4>)
 8001c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c2e:	4a51      	ldr	r2, [pc, #324]	; (8001d74 <HAL_GPIO_Init+0x2e8>)
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	089b      	lsrs	r3, r3, #2
 8001c34:	3302      	adds	r3, #2
 8001c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	f003 0303 	and.w	r3, r3, #3
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	220f      	movs	r2, #15
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a48      	ldr	r2, [pc, #288]	; (8001d78 <HAL_GPIO_Init+0x2ec>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d019      	beq.n	8001c8e <HAL_GPIO_Init+0x202>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a47      	ldr	r2, [pc, #284]	; (8001d7c <HAL_GPIO_Init+0x2f0>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d013      	beq.n	8001c8a <HAL_GPIO_Init+0x1fe>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a46      	ldr	r2, [pc, #280]	; (8001d80 <HAL_GPIO_Init+0x2f4>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d00d      	beq.n	8001c86 <HAL_GPIO_Init+0x1fa>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a45      	ldr	r2, [pc, #276]	; (8001d84 <HAL_GPIO_Init+0x2f8>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d007      	beq.n	8001c82 <HAL_GPIO_Init+0x1f6>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a44      	ldr	r2, [pc, #272]	; (8001d88 <HAL_GPIO_Init+0x2fc>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d101      	bne.n	8001c7e <HAL_GPIO_Init+0x1f2>
 8001c7a:	2304      	movs	r3, #4
 8001c7c:	e008      	b.n	8001c90 <HAL_GPIO_Init+0x204>
 8001c7e:	2307      	movs	r3, #7
 8001c80:	e006      	b.n	8001c90 <HAL_GPIO_Init+0x204>
 8001c82:	2303      	movs	r3, #3
 8001c84:	e004      	b.n	8001c90 <HAL_GPIO_Init+0x204>
 8001c86:	2302      	movs	r3, #2
 8001c88:	e002      	b.n	8001c90 <HAL_GPIO_Init+0x204>
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e000      	b.n	8001c90 <HAL_GPIO_Init+0x204>
 8001c8e:	2300      	movs	r3, #0
 8001c90:	69fa      	ldr	r2, [r7, #28]
 8001c92:	f002 0203 	and.w	r2, r2, #3
 8001c96:	0092      	lsls	r2, r2, #2
 8001c98:	4093      	lsls	r3, r2
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ca0:	4934      	ldr	r1, [pc, #208]	; (8001d74 <HAL_GPIO_Init+0x2e8>)
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	089b      	lsrs	r3, r3, #2
 8001ca6:	3302      	adds	r3, #2
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cae:	4b37      	ldr	r3, [pc, #220]	; (8001d8c <HAL_GPIO_Init+0x300>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cd2:	4a2e      	ldr	r2, [pc, #184]	; (8001d8c <HAL_GPIO_Init+0x300>)
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001cd8:	4b2c      	ldr	r3, [pc, #176]	; (8001d8c <HAL_GPIO_Init+0x300>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d003      	beq.n	8001cfc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cfc:	4a23      	ldr	r2, [pc, #140]	; (8001d8c <HAL_GPIO_Init+0x300>)
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d02:	4b22      	ldr	r3, [pc, #136]	; (8001d8c <HAL_GPIO_Init+0x300>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d26:	4a19      	ldr	r2, [pc, #100]	; (8001d8c <HAL_GPIO_Init+0x300>)
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d2c:	4b17      	ldr	r3, [pc, #92]	; (8001d8c <HAL_GPIO_Init+0x300>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	43db      	mvns	r3, r3
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d003      	beq.n	8001d50 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d50:	4a0e      	ldr	r2, [pc, #56]	; (8001d8c <HAL_GPIO_Init+0x300>)
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	61fb      	str	r3, [r7, #28]
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	2b0f      	cmp	r3, #15
 8001d60:	f67f aea2 	bls.w	8001aa8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d64:	bf00      	nop
 8001d66:	3724      	adds	r7, #36	; 0x24
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	40023800 	.word	0x40023800
 8001d74:	40013800 	.word	0x40013800
 8001d78:	40020000 	.word	0x40020000
 8001d7c:	40020400 	.word	0x40020400
 8001d80:	40020800 	.word	0x40020800
 8001d84:	40020c00 	.word	0x40020c00
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	40013c00 	.word	0x40013c00

08001d90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	460b      	mov	r3, r1
 8001d9a:	807b      	strh	r3, [r7, #2]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001da0:	787b      	ldrb	r3, [r7, #1]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001da6:	887a      	ldrh	r2, [r7, #2]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001dac:	e003      	b.n	8001db6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dae:	887b      	ldrh	r3, [r7, #2]
 8001db0:	041a      	lsls	r2, r3, #16
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	619a      	str	r2, [r3, #24]
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b083      	sub	sp, #12
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
 8001dca:	460b      	mov	r3, r1
 8001dcc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	695a      	ldr	r2, [r3, #20]
 8001dd2:	887b      	ldrh	r3, [r7, #2]
 8001dd4:	401a      	ands	r2, r3
 8001dd6:	887b      	ldrh	r3, [r7, #2]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d104      	bne.n	8001de6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001ddc:	887b      	ldrh	r3, [r7, #2]
 8001dde:	041a      	lsls	r2, r3, #16
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001de4:	e002      	b.n	8001dec <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001de6:	887a      	ldrh	r2, [r7, #2]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	619a      	str	r2, [r3, #24]
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e25b      	b.n	80022c2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d075      	beq.n	8001f02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e16:	4ba3      	ldr	r3, [pc, #652]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 030c 	and.w	r3, r3, #12
 8001e1e:	2b04      	cmp	r3, #4
 8001e20:	d00c      	beq.n	8001e3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e22:	4ba0      	ldr	r3, [pc, #640]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e2a:	2b08      	cmp	r3, #8
 8001e2c:	d112      	bne.n	8001e54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e2e:	4b9d      	ldr	r3, [pc, #628]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e3a:	d10b      	bne.n	8001e54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e3c:	4b99      	ldr	r3, [pc, #612]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d05b      	beq.n	8001f00 <HAL_RCC_OscConfig+0x108>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d157      	bne.n	8001f00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e236      	b.n	80022c2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e5c:	d106      	bne.n	8001e6c <HAL_RCC_OscConfig+0x74>
 8001e5e:	4b91      	ldr	r3, [pc, #580]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a90      	ldr	r2, [pc, #576]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 8001e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e68:	6013      	str	r3, [r2, #0]
 8001e6a:	e01d      	b.n	8001ea8 <HAL_RCC_OscConfig+0xb0>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e74:	d10c      	bne.n	8001e90 <HAL_RCC_OscConfig+0x98>
 8001e76:	4b8b      	ldr	r3, [pc, #556]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a8a      	ldr	r2, [pc, #552]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 8001e7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e80:	6013      	str	r3, [r2, #0]
 8001e82:	4b88      	ldr	r3, [pc, #544]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a87      	ldr	r2, [pc, #540]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 8001e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e8c:	6013      	str	r3, [r2, #0]
 8001e8e:	e00b      	b.n	8001ea8 <HAL_RCC_OscConfig+0xb0>
 8001e90:	4b84      	ldr	r3, [pc, #528]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a83      	ldr	r2, [pc, #524]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 8001e96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e9a:	6013      	str	r3, [r2, #0]
 8001e9c:	4b81      	ldr	r3, [pc, #516]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a80      	ldr	r2, [pc, #512]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 8001ea2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ea6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d013      	beq.n	8001ed8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb0:	f7ff fcac 	bl	800180c <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eb8:	f7ff fca8 	bl	800180c <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b64      	cmp	r3, #100	; 0x64
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e1fb      	b.n	80022c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eca:	4b76      	ldr	r3, [pc, #472]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d0f0      	beq.n	8001eb8 <HAL_RCC_OscConfig+0xc0>
 8001ed6:	e014      	b.n	8001f02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed8:	f7ff fc98 	bl	800180c <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ee0:	f7ff fc94 	bl	800180c <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b64      	cmp	r3, #100	; 0x64
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e1e7      	b.n	80022c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ef2:	4b6c      	ldr	r3, [pc, #432]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1f0      	bne.n	8001ee0 <HAL_RCC_OscConfig+0xe8>
 8001efe:	e000      	b.n	8001f02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d063      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f0e:	4b65      	ldr	r3, [pc, #404]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f003 030c 	and.w	r3, r3, #12
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d00b      	beq.n	8001f32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f1a:	4b62      	ldr	r3, [pc, #392]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f22:	2b08      	cmp	r3, #8
 8001f24:	d11c      	bne.n	8001f60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f26:	4b5f      	ldr	r3, [pc, #380]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d116      	bne.n	8001f60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f32:	4b5c      	ldr	r3, [pc, #368]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d005      	beq.n	8001f4a <HAL_RCC_OscConfig+0x152>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d001      	beq.n	8001f4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e1bb      	b.n	80022c2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f4a:	4b56      	ldr	r3, [pc, #344]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	4952      	ldr	r1, [pc, #328]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f5e:	e03a      	b.n	8001fd6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d020      	beq.n	8001faa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f68:	4b4f      	ldr	r3, [pc, #316]	; (80020a8 <HAL_RCC_OscConfig+0x2b0>)
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f6e:	f7ff fc4d 	bl	800180c <HAL_GetTick>
 8001f72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f74:	e008      	b.n	8001f88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f76:	f7ff fc49 	bl	800180c <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d901      	bls.n	8001f88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e19c      	b.n	80022c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f88:	4b46      	ldr	r3, [pc, #280]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d0f0      	beq.n	8001f76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f94:	4b43      	ldr	r3, [pc, #268]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	4940      	ldr	r1, [pc, #256]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	600b      	str	r3, [r1, #0]
 8001fa8:	e015      	b.n	8001fd6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001faa:	4b3f      	ldr	r3, [pc, #252]	; (80020a8 <HAL_RCC_OscConfig+0x2b0>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb0:	f7ff fc2c 	bl	800180c <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fb8:	f7ff fc28 	bl	800180c <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e17b      	b.n	80022c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fca:	4b36      	ldr	r3, [pc, #216]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f0      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0308 	and.w	r3, r3, #8
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d030      	beq.n	8002044 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d016      	beq.n	8002018 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fea:	4b30      	ldr	r3, [pc, #192]	; (80020ac <HAL_RCC_OscConfig+0x2b4>)
 8001fec:	2201      	movs	r2, #1
 8001fee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff0:	f7ff fc0c 	bl	800180c <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ff8:	f7ff fc08 	bl	800180c <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e15b      	b.n	80022c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800200a:	4b26      	ldr	r3, [pc, #152]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 800200c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0f0      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x200>
 8002016:	e015      	b.n	8002044 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002018:	4b24      	ldr	r3, [pc, #144]	; (80020ac <HAL_RCC_OscConfig+0x2b4>)
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800201e:	f7ff fbf5 	bl	800180c <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002026:	f7ff fbf1 	bl	800180c <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e144      	b.n	80022c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002038:	4b1a      	ldr	r3, [pc, #104]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 800203a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1f0      	bne.n	8002026 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0304 	and.w	r3, r3, #4
 800204c:	2b00      	cmp	r3, #0
 800204e:	f000 80a0 	beq.w	8002192 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002052:	2300      	movs	r3, #0
 8002054:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002056:	4b13      	ldr	r3, [pc, #76]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d10f      	bne.n	8002082 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	60bb      	str	r3, [r7, #8]
 8002066:	4b0f      	ldr	r3, [pc, #60]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	4a0e      	ldr	r2, [pc, #56]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 800206c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002070:	6413      	str	r3, [r2, #64]	; 0x40
 8002072:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207a:	60bb      	str	r3, [r7, #8]
 800207c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800207e:	2301      	movs	r3, #1
 8002080:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002082:	4b0b      	ldr	r3, [pc, #44]	; (80020b0 <HAL_RCC_OscConfig+0x2b8>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800208a:	2b00      	cmp	r3, #0
 800208c:	d121      	bne.n	80020d2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800208e:	4b08      	ldr	r3, [pc, #32]	; (80020b0 <HAL_RCC_OscConfig+0x2b8>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a07      	ldr	r2, [pc, #28]	; (80020b0 <HAL_RCC_OscConfig+0x2b8>)
 8002094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002098:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800209a:	f7ff fbb7 	bl	800180c <HAL_GetTick>
 800209e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a0:	e011      	b.n	80020c6 <HAL_RCC_OscConfig+0x2ce>
 80020a2:	bf00      	nop
 80020a4:	40023800 	.word	0x40023800
 80020a8:	42470000 	.word	0x42470000
 80020ac:	42470e80 	.word	0x42470e80
 80020b0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020b4:	f7ff fbaa 	bl	800180c <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e0fd      	b.n	80022c2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c6:	4b81      	ldr	r3, [pc, #516]	; (80022cc <HAL_RCC_OscConfig+0x4d4>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d0f0      	beq.n	80020b4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d106      	bne.n	80020e8 <HAL_RCC_OscConfig+0x2f0>
 80020da:	4b7d      	ldr	r3, [pc, #500]	; (80022d0 <HAL_RCC_OscConfig+0x4d8>)
 80020dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020de:	4a7c      	ldr	r2, [pc, #496]	; (80022d0 <HAL_RCC_OscConfig+0x4d8>)
 80020e0:	f043 0301 	orr.w	r3, r3, #1
 80020e4:	6713      	str	r3, [r2, #112]	; 0x70
 80020e6:	e01c      	b.n	8002122 <HAL_RCC_OscConfig+0x32a>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	2b05      	cmp	r3, #5
 80020ee:	d10c      	bne.n	800210a <HAL_RCC_OscConfig+0x312>
 80020f0:	4b77      	ldr	r3, [pc, #476]	; (80022d0 <HAL_RCC_OscConfig+0x4d8>)
 80020f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f4:	4a76      	ldr	r2, [pc, #472]	; (80022d0 <HAL_RCC_OscConfig+0x4d8>)
 80020f6:	f043 0304 	orr.w	r3, r3, #4
 80020fa:	6713      	str	r3, [r2, #112]	; 0x70
 80020fc:	4b74      	ldr	r3, [pc, #464]	; (80022d0 <HAL_RCC_OscConfig+0x4d8>)
 80020fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002100:	4a73      	ldr	r2, [pc, #460]	; (80022d0 <HAL_RCC_OscConfig+0x4d8>)
 8002102:	f043 0301 	orr.w	r3, r3, #1
 8002106:	6713      	str	r3, [r2, #112]	; 0x70
 8002108:	e00b      	b.n	8002122 <HAL_RCC_OscConfig+0x32a>
 800210a:	4b71      	ldr	r3, [pc, #452]	; (80022d0 <HAL_RCC_OscConfig+0x4d8>)
 800210c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800210e:	4a70      	ldr	r2, [pc, #448]	; (80022d0 <HAL_RCC_OscConfig+0x4d8>)
 8002110:	f023 0301 	bic.w	r3, r3, #1
 8002114:	6713      	str	r3, [r2, #112]	; 0x70
 8002116:	4b6e      	ldr	r3, [pc, #440]	; (80022d0 <HAL_RCC_OscConfig+0x4d8>)
 8002118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800211a:	4a6d      	ldr	r2, [pc, #436]	; (80022d0 <HAL_RCC_OscConfig+0x4d8>)
 800211c:	f023 0304 	bic.w	r3, r3, #4
 8002120:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d015      	beq.n	8002156 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800212a:	f7ff fb6f 	bl	800180c <HAL_GetTick>
 800212e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002130:	e00a      	b.n	8002148 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002132:	f7ff fb6b 	bl	800180c <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002140:	4293      	cmp	r3, r2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e0bc      	b.n	80022c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002148:	4b61      	ldr	r3, [pc, #388]	; (80022d0 <HAL_RCC_OscConfig+0x4d8>)
 800214a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0ee      	beq.n	8002132 <HAL_RCC_OscConfig+0x33a>
 8002154:	e014      	b.n	8002180 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002156:	f7ff fb59 	bl	800180c <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800215c:	e00a      	b.n	8002174 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800215e:	f7ff fb55 	bl	800180c <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	f241 3288 	movw	r2, #5000	; 0x1388
 800216c:	4293      	cmp	r3, r2
 800216e:	d901      	bls.n	8002174 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e0a6      	b.n	80022c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002174:	4b56      	ldr	r3, [pc, #344]	; (80022d0 <HAL_RCC_OscConfig+0x4d8>)
 8002176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d1ee      	bne.n	800215e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002180:	7dfb      	ldrb	r3, [r7, #23]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d105      	bne.n	8002192 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002186:	4b52      	ldr	r3, [pc, #328]	; (80022d0 <HAL_RCC_OscConfig+0x4d8>)
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	4a51      	ldr	r2, [pc, #324]	; (80022d0 <HAL_RCC_OscConfig+0x4d8>)
 800218c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002190:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	2b00      	cmp	r3, #0
 8002198:	f000 8092 	beq.w	80022c0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800219c:	4b4c      	ldr	r3, [pc, #304]	; (80022d0 <HAL_RCC_OscConfig+0x4d8>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f003 030c 	and.w	r3, r3, #12
 80021a4:	2b08      	cmp	r3, #8
 80021a6:	d05c      	beq.n	8002262 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d141      	bne.n	8002234 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021b0:	4b48      	ldr	r3, [pc, #288]	; (80022d4 <HAL_RCC_OscConfig+0x4dc>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b6:	f7ff fb29 	bl	800180c <HAL_GetTick>
 80021ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021bc:	e008      	b.n	80021d0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021be:	f7ff fb25 	bl	800180c <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d901      	bls.n	80021d0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e078      	b.n	80022c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021d0:	4b3f      	ldr	r3, [pc, #252]	; (80022d0 <HAL_RCC_OscConfig+0x4d8>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1f0      	bne.n	80021be <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	69da      	ldr	r2, [r3, #28]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	431a      	orrs	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ea:	019b      	lsls	r3, r3, #6
 80021ec:	431a      	orrs	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f2:	085b      	lsrs	r3, r3, #1
 80021f4:	3b01      	subs	r3, #1
 80021f6:	041b      	lsls	r3, r3, #16
 80021f8:	431a      	orrs	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fe:	061b      	lsls	r3, r3, #24
 8002200:	4933      	ldr	r1, [pc, #204]	; (80022d0 <HAL_RCC_OscConfig+0x4d8>)
 8002202:	4313      	orrs	r3, r2
 8002204:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002206:	4b33      	ldr	r3, [pc, #204]	; (80022d4 <HAL_RCC_OscConfig+0x4dc>)
 8002208:	2201      	movs	r2, #1
 800220a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220c:	f7ff fafe 	bl	800180c <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002214:	f7ff fafa 	bl	800180c <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e04d      	b.n	80022c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002226:	4b2a      	ldr	r3, [pc, #168]	; (80022d0 <HAL_RCC_OscConfig+0x4d8>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d0f0      	beq.n	8002214 <HAL_RCC_OscConfig+0x41c>
 8002232:	e045      	b.n	80022c0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002234:	4b27      	ldr	r3, [pc, #156]	; (80022d4 <HAL_RCC_OscConfig+0x4dc>)
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223a:	f7ff fae7 	bl	800180c <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002242:	f7ff fae3 	bl	800180c <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e036      	b.n	80022c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002254:	4b1e      	ldr	r3, [pc, #120]	; (80022d0 <HAL_RCC_OscConfig+0x4d8>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1f0      	bne.n	8002242 <HAL_RCC_OscConfig+0x44a>
 8002260:	e02e      	b.n	80022c0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d101      	bne.n	800226e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e029      	b.n	80022c2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800226e:	4b18      	ldr	r3, [pc, #96]	; (80022d0 <HAL_RCC_OscConfig+0x4d8>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	69db      	ldr	r3, [r3, #28]
 800227e:	429a      	cmp	r2, r3
 8002280:	d11c      	bne.n	80022bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800228c:	429a      	cmp	r2, r3
 800228e:	d115      	bne.n	80022bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002296:	4013      	ands	r3, r2
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800229c:	4293      	cmp	r3, r2
 800229e:	d10d      	bne.n	80022bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d106      	bne.n	80022bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d001      	beq.n	80022c0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e000      	b.n	80022c2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3718      	adds	r7, #24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40007000 	.word	0x40007000
 80022d0:	40023800 	.word	0x40023800
 80022d4:	42470060 	.word	0x42470060

080022d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e0cc      	b.n	8002486 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022ec:	4b68      	ldr	r3, [pc, #416]	; (8002490 <HAL_RCC_ClockConfig+0x1b8>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 030f 	and.w	r3, r3, #15
 80022f4:	683a      	ldr	r2, [r7, #0]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d90c      	bls.n	8002314 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022fa:	4b65      	ldr	r3, [pc, #404]	; (8002490 <HAL_RCC_ClockConfig+0x1b8>)
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	b2d2      	uxtb	r2, r2
 8002300:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002302:	4b63      	ldr	r3, [pc, #396]	; (8002490 <HAL_RCC_ClockConfig+0x1b8>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	429a      	cmp	r2, r3
 800230e:	d001      	beq.n	8002314 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e0b8      	b.n	8002486 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d020      	beq.n	8002362 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0304 	and.w	r3, r3, #4
 8002328:	2b00      	cmp	r3, #0
 800232a:	d005      	beq.n	8002338 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800232c:	4b59      	ldr	r3, [pc, #356]	; (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	4a58      	ldr	r2, [pc, #352]	; (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 8002332:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002336:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0308 	and.w	r3, r3, #8
 8002340:	2b00      	cmp	r3, #0
 8002342:	d005      	beq.n	8002350 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002344:	4b53      	ldr	r3, [pc, #332]	; (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	4a52      	ldr	r2, [pc, #328]	; (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 800234a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800234e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002350:	4b50      	ldr	r3, [pc, #320]	; (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	494d      	ldr	r1, [pc, #308]	; (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 800235e:	4313      	orrs	r3, r2
 8002360:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	2b00      	cmp	r3, #0
 800236c:	d044      	beq.n	80023f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d107      	bne.n	8002386 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002376:	4b47      	ldr	r3, [pc, #284]	; (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d119      	bne.n	80023b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e07f      	b.n	8002486 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	2b02      	cmp	r3, #2
 800238c:	d003      	beq.n	8002396 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002392:	2b03      	cmp	r3, #3
 8002394:	d107      	bne.n	80023a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002396:	4b3f      	ldr	r3, [pc, #252]	; (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d109      	bne.n	80023b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e06f      	b.n	8002486 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a6:	4b3b      	ldr	r3, [pc, #236]	; (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e067      	b.n	8002486 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023b6:	4b37      	ldr	r3, [pc, #220]	; (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f023 0203 	bic.w	r2, r3, #3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	4934      	ldr	r1, [pc, #208]	; (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023c8:	f7ff fa20 	bl	800180c <HAL_GetTick>
 80023cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ce:	e00a      	b.n	80023e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023d0:	f7ff fa1c 	bl	800180c <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	f241 3288 	movw	r2, #5000	; 0x1388
 80023de:	4293      	cmp	r3, r2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e04f      	b.n	8002486 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e6:	4b2b      	ldr	r3, [pc, #172]	; (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f003 020c 	and.w	r2, r3, #12
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d1eb      	bne.n	80023d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023f8:	4b25      	ldr	r3, [pc, #148]	; (8002490 <HAL_RCC_ClockConfig+0x1b8>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 030f 	and.w	r3, r3, #15
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	429a      	cmp	r2, r3
 8002404:	d20c      	bcs.n	8002420 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002406:	4b22      	ldr	r3, [pc, #136]	; (8002490 <HAL_RCC_ClockConfig+0x1b8>)
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	b2d2      	uxtb	r2, r2
 800240c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800240e:	4b20      	ldr	r3, [pc, #128]	; (8002490 <HAL_RCC_ClockConfig+0x1b8>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 030f 	and.w	r3, r3, #15
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	429a      	cmp	r2, r3
 800241a:	d001      	beq.n	8002420 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e032      	b.n	8002486 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0304 	and.w	r3, r3, #4
 8002428:	2b00      	cmp	r3, #0
 800242a:	d008      	beq.n	800243e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800242c:	4b19      	ldr	r3, [pc, #100]	; (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	4916      	ldr	r1, [pc, #88]	; (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 800243a:	4313      	orrs	r3, r2
 800243c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0308 	and.w	r3, r3, #8
 8002446:	2b00      	cmp	r3, #0
 8002448:	d009      	beq.n	800245e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800244a:	4b12      	ldr	r3, [pc, #72]	; (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	490e      	ldr	r1, [pc, #56]	; (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 800245a:	4313      	orrs	r3, r2
 800245c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800245e:	f000 f821 	bl	80024a4 <HAL_RCC_GetSysClockFreq>
 8002462:	4601      	mov	r1, r0
 8002464:	4b0b      	ldr	r3, [pc, #44]	; (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	091b      	lsrs	r3, r3, #4
 800246a:	f003 030f 	and.w	r3, r3, #15
 800246e:	4a0a      	ldr	r2, [pc, #40]	; (8002498 <HAL_RCC_ClockConfig+0x1c0>)
 8002470:	5cd3      	ldrb	r3, [r2, r3]
 8002472:	fa21 f303 	lsr.w	r3, r1, r3
 8002476:	4a09      	ldr	r2, [pc, #36]	; (800249c <HAL_RCC_ClockConfig+0x1c4>)
 8002478:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800247a:	4b09      	ldr	r3, [pc, #36]	; (80024a0 <HAL_RCC_ClockConfig+0x1c8>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f7ff f980 	bl	8001784 <HAL_InitTick>

  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	40023c00 	.word	0x40023c00
 8002494:	40023800 	.word	0x40023800
 8002498:	08002f1c 	.word	0x08002f1c
 800249c:	20000000 	.word	0x20000000
 80024a0:	20000004 	.word	0x20000004

080024a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80024aa:	2300      	movs	r3, #0
 80024ac:	607b      	str	r3, [r7, #4]
 80024ae:	2300      	movs	r3, #0
 80024b0:	60fb      	str	r3, [r7, #12]
 80024b2:	2300      	movs	r3, #0
 80024b4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80024b6:	2300      	movs	r3, #0
 80024b8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024ba:	4b50      	ldr	r3, [pc, #320]	; (80025fc <HAL_RCC_GetSysClockFreq+0x158>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 030c 	and.w	r3, r3, #12
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	d007      	beq.n	80024d6 <HAL_RCC_GetSysClockFreq+0x32>
 80024c6:	2b08      	cmp	r3, #8
 80024c8:	d008      	beq.n	80024dc <HAL_RCC_GetSysClockFreq+0x38>
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	f040 808d 	bne.w	80025ea <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024d0:	4b4b      	ldr	r3, [pc, #300]	; (8002600 <HAL_RCC_GetSysClockFreq+0x15c>)
 80024d2:	60bb      	str	r3, [r7, #8]
       break;
 80024d4:	e08c      	b.n	80025f0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024d6:	4b4b      	ldr	r3, [pc, #300]	; (8002604 <HAL_RCC_GetSysClockFreq+0x160>)
 80024d8:	60bb      	str	r3, [r7, #8]
      break;
 80024da:	e089      	b.n	80025f0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024dc:	4b47      	ldr	r3, [pc, #284]	; (80025fc <HAL_RCC_GetSysClockFreq+0x158>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024e4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024e6:	4b45      	ldr	r3, [pc, #276]	; (80025fc <HAL_RCC_GetSysClockFreq+0x158>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d023      	beq.n	800253a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024f2:	4b42      	ldr	r3, [pc, #264]	; (80025fc <HAL_RCC_GetSysClockFreq+0x158>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	099b      	lsrs	r3, r3, #6
 80024f8:	f04f 0400 	mov.w	r4, #0
 80024fc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002500:	f04f 0200 	mov.w	r2, #0
 8002504:	ea03 0501 	and.w	r5, r3, r1
 8002508:	ea04 0602 	and.w	r6, r4, r2
 800250c:	4a3d      	ldr	r2, [pc, #244]	; (8002604 <HAL_RCC_GetSysClockFreq+0x160>)
 800250e:	fb02 f106 	mul.w	r1, r2, r6
 8002512:	2200      	movs	r2, #0
 8002514:	fb02 f205 	mul.w	r2, r2, r5
 8002518:	440a      	add	r2, r1
 800251a:	493a      	ldr	r1, [pc, #232]	; (8002604 <HAL_RCC_GetSysClockFreq+0x160>)
 800251c:	fba5 0101 	umull	r0, r1, r5, r1
 8002520:	1853      	adds	r3, r2, r1
 8002522:	4619      	mov	r1, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f04f 0400 	mov.w	r4, #0
 800252a:	461a      	mov	r2, r3
 800252c:	4623      	mov	r3, r4
 800252e:	f7fd fe51 	bl	80001d4 <__aeabi_uldivmod>
 8002532:	4603      	mov	r3, r0
 8002534:	460c      	mov	r4, r1
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	e049      	b.n	80025ce <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800253a:	4b30      	ldr	r3, [pc, #192]	; (80025fc <HAL_RCC_GetSysClockFreq+0x158>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	099b      	lsrs	r3, r3, #6
 8002540:	f04f 0400 	mov.w	r4, #0
 8002544:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002548:	f04f 0200 	mov.w	r2, #0
 800254c:	ea03 0501 	and.w	r5, r3, r1
 8002550:	ea04 0602 	and.w	r6, r4, r2
 8002554:	4629      	mov	r1, r5
 8002556:	4632      	mov	r2, r6
 8002558:	f04f 0300 	mov.w	r3, #0
 800255c:	f04f 0400 	mov.w	r4, #0
 8002560:	0154      	lsls	r4, r2, #5
 8002562:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002566:	014b      	lsls	r3, r1, #5
 8002568:	4619      	mov	r1, r3
 800256a:	4622      	mov	r2, r4
 800256c:	1b49      	subs	r1, r1, r5
 800256e:	eb62 0206 	sbc.w	r2, r2, r6
 8002572:	f04f 0300 	mov.w	r3, #0
 8002576:	f04f 0400 	mov.w	r4, #0
 800257a:	0194      	lsls	r4, r2, #6
 800257c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002580:	018b      	lsls	r3, r1, #6
 8002582:	1a5b      	subs	r3, r3, r1
 8002584:	eb64 0402 	sbc.w	r4, r4, r2
 8002588:	f04f 0100 	mov.w	r1, #0
 800258c:	f04f 0200 	mov.w	r2, #0
 8002590:	00e2      	lsls	r2, r4, #3
 8002592:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002596:	00d9      	lsls	r1, r3, #3
 8002598:	460b      	mov	r3, r1
 800259a:	4614      	mov	r4, r2
 800259c:	195b      	adds	r3, r3, r5
 800259e:	eb44 0406 	adc.w	r4, r4, r6
 80025a2:	f04f 0100 	mov.w	r1, #0
 80025a6:	f04f 0200 	mov.w	r2, #0
 80025aa:	02a2      	lsls	r2, r4, #10
 80025ac:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80025b0:	0299      	lsls	r1, r3, #10
 80025b2:	460b      	mov	r3, r1
 80025b4:	4614      	mov	r4, r2
 80025b6:	4618      	mov	r0, r3
 80025b8:	4621      	mov	r1, r4
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f04f 0400 	mov.w	r4, #0
 80025c0:	461a      	mov	r2, r3
 80025c2:	4623      	mov	r3, r4
 80025c4:	f7fd fe06 	bl	80001d4 <__aeabi_uldivmod>
 80025c8:	4603      	mov	r3, r0
 80025ca:	460c      	mov	r4, r1
 80025cc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025ce:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <HAL_RCC_GetSysClockFreq+0x158>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	0c1b      	lsrs	r3, r3, #16
 80025d4:	f003 0303 	and.w	r3, r3, #3
 80025d8:	3301      	adds	r3, #1
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e6:	60bb      	str	r3, [r7, #8]
      break;
 80025e8:	e002      	b.n	80025f0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025ea:	4b05      	ldr	r3, [pc, #20]	; (8002600 <HAL_RCC_GetSysClockFreq+0x15c>)
 80025ec:	60bb      	str	r3, [r7, #8]
      break;
 80025ee:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025f0:	68bb      	ldr	r3, [r7, #8]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3714      	adds	r7, #20
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025fa:	bf00      	nop
 80025fc:	40023800 	.word	0x40023800
 8002600:	00f42400 	.word	0x00f42400
 8002604:	017d7840 	.word	0x017d7840

08002608 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e01d      	b.n	8002656 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d106      	bne.n	8002634 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f7fe ffe6 	bl	8001600 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2202      	movs	r2, #2
 8002638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	3304      	adds	r3, #4
 8002644:	4619      	mov	r1, r3
 8002646:	4610      	mov	r0, r2
 8002648:	f000 fa64 	bl	8002b14 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
	...

08002660 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	2b0c      	cmp	r3, #12
 800266e:	d841      	bhi.n	80026f4 <HAL_TIM_IC_Start_IT+0x94>
 8002670:	a201      	add	r2, pc, #4	; (adr r2, 8002678 <HAL_TIM_IC_Start_IT+0x18>)
 8002672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002676:	bf00      	nop
 8002678:	080026ad 	.word	0x080026ad
 800267c:	080026f5 	.word	0x080026f5
 8002680:	080026f5 	.word	0x080026f5
 8002684:	080026f5 	.word	0x080026f5
 8002688:	080026bf 	.word	0x080026bf
 800268c:	080026f5 	.word	0x080026f5
 8002690:	080026f5 	.word	0x080026f5
 8002694:	080026f5 	.word	0x080026f5
 8002698:	080026d1 	.word	0x080026d1
 800269c:	080026f5 	.word	0x080026f5
 80026a0:	080026f5 	.word	0x080026f5
 80026a4:	080026f5 	.word	0x080026f5
 80026a8:	080026e3 	.word	0x080026e3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68da      	ldr	r2, [r3, #12]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f042 0202 	orr.w	r2, r2, #2
 80026ba:	60da      	str	r2, [r3, #12]
      break;
 80026bc:	e01b      	b.n	80026f6 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68da      	ldr	r2, [r3, #12]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f042 0204 	orr.w	r2, r2, #4
 80026cc:	60da      	str	r2, [r3, #12]
      break;
 80026ce:	e012      	b.n	80026f6 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68da      	ldr	r2, [r3, #12]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f042 0208 	orr.w	r2, r2, #8
 80026de:	60da      	str	r2, [r3, #12]
      break;
 80026e0:	e009      	b.n	80026f6 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68da      	ldr	r2, [r3, #12]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f042 0210 	orr.w	r2, r2, #16
 80026f0:	60da      	str	r2, [r3, #12]
      break;
 80026f2:	e000      	b.n	80026f6 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 80026f4:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2201      	movs	r2, #1
 80026fc:	6839      	ldr	r1, [r7, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f000 fb22 	bl	8002d48 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2b06      	cmp	r3, #6
 8002714:	d007      	beq.n	8002726 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f042 0201 	orr.w	r2, r2, #1
 8002724:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	3710      	adds	r7, #16
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b02      	cmp	r3, #2
 8002744:	d122      	bne.n	800278c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b02      	cmp	r3, #2
 8002752:	d11b      	bne.n	800278c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f06f 0202 	mvn.w	r2, #2
 800275c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2201      	movs	r2, #1
 8002762:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	f003 0303 	and.w	r3, r3, #3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d003      	beq.n	800277a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 f9af 	bl	8002ad6 <HAL_TIM_IC_CaptureCallback>
 8002778:	e005      	b.n	8002786 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 f9a1 	bl	8002ac2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 f9b2 	bl	8002aea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	f003 0304 	and.w	r3, r3, #4
 8002796:	2b04      	cmp	r3, #4
 8002798:	d122      	bne.n	80027e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	f003 0304 	and.w	r3, r3, #4
 80027a4:	2b04      	cmp	r3, #4
 80027a6:	d11b      	bne.n	80027e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f06f 0204 	mvn.w	r2, #4
 80027b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2202      	movs	r2, #2
 80027b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 f985 	bl	8002ad6 <HAL_TIM_IC_CaptureCallback>
 80027cc:	e005      	b.n	80027da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 f977 	bl	8002ac2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f000 f988 	bl	8002aea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	f003 0308 	and.w	r3, r3, #8
 80027ea:	2b08      	cmp	r3, #8
 80027ec:	d122      	bne.n	8002834 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	f003 0308 	and.w	r3, r3, #8
 80027f8:	2b08      	cmp	r3, #8
 80027fa:	d11b      	bne.n	8002834 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f06f 0208 	mvn.w	r2, #8
 8002804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2204      	movs	r2, #4
 800280a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	f003 0303 	and.w	r3, r3, #3
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 f95b 	bl	8002ad6 <HAL_TIM_IC_CaptureCallback>
 8002820:	e005      	b.n	800282e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 f94d 	bl	8002ac2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f000 f95e 	bl	8002aea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	f003 0310 	and.w	r3, r3, #16
 800283e:	2b10      	cmp	r3, #16
 8002840:	d122      	bne.n	8002888 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	f003 0310 	and.w	r3, r3, #16
 800284c:	2b10      	cmp	r3, #16
 800284e:	d11b      	bne.n	8002888 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f06f 0210 	mvn.w	r2, #16
 8002858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2208      	movs	r2, #8
 800285e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800286a:	2b00      	cmp	r3, #0
 800286c:	d003      	beq.n	8002876 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 f931 	bl	8002ad6 <HAL_TIM_IC_CaptureCallback>
 8002874:	e005      	b.n	8002882 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 f923 	bl	8002ac2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f000 f934 	bl	8002aea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b01      	cmp	r3, #1
 8002894:	d10e      	bne.n	80028b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d107      	bne.n	80028b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f06f 0201 	mvn.w	r2, #1
 80028ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 f8fd 	bl	8002aae <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028be:	2b80      	cmp	r3, #128	; 0x80
 80028c0:	d10e      	bne.n	80028e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028cc:	2b80      	cmp	r3, #128	; 0x80
 80028ce:	d107      	bne.n	80028e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80028d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 fad2 	bl	8002e84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ea:	2b40      	cmp	r3, #64	; 0x40
 80028ec:	d10e      	bne.n	800290c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f8:	2b40      	cmp	r3, #64	; 0x40
 80028fa:	d107      	bne.n	800290c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 f8f9 	bl	8002afe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	f003 0320 	and.w	r3, r3, #32
 8002916:	2b20      	cmp	r3, #32
 8002918:	d10e      	bne.n	8002938 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	f003 0320 	and.w	r3, r3, #32
 8002924:	2b20      	cmp	r3, #32
 8002926:	d107      	bne.n	8002938 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f06f 0220 	mvn.w	r2, #32
 8002930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f000 fa9c 	bl	8002e70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002938:	bf00      	nop
 800293a:	3708      	adds	r7, #8
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002950:	2b01      	cmp	r3, #1
 8002952:	d101      	bne.n	8002958 <HAL_TIM_ConfigClockSource+0x18>
 8002954:	2302      	movs	r3, #2
 8002956:	e0a6      	b.n	8002aa6 <HAL_TIM_ConfigClockSource+0x166>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2202      	movs	r2, #2
 8002964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002976:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800297e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2b40      	cmp	r3, #64	; 0x40
 800298e:	d067      	beq.n	8002a60 <HAL_TIM_ConfigClockSource+0x120>
 8002990:	2b40      	cmp	r3, #64	; 0x40
 8002992:	d80b      	bhi.n	80029ac <HAL_TIM_ConfigClockSource+0x6c>
 8002994:	2b10      	cmp	r3, #16
 8002996:	d073      	beq.n	8002a80 <HAL_TIM_ConfigClockSource+0x140>
 8002998:	2b10      	cmp	r3, #16
 800299a:	d802      	bhi.n	80029a2 <HAL_TIM_ConfigClockSource+0x62>
 800299c:	2b00      	cmp	r3, #0
 800299e:	d06f      	beq.n	8002a80 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80029a0:	e078      	b.n	8002a94 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80029a2:	2b20      	cmp	r3, #32
 80029a4:	d06c      	beq.n	8002a80 <HAL_TIM_ConfigClockSource+0x140>
 80029a6:	2b30      	cmp	r3, #48	; 0x30
 80029a8:	d06a      	beq.n	8002a80 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80029aa:	e073      	b.n	8002a94 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80029ac:	2b70      	cmp	r3, #112	; 0x70
 80029ae:	d00d      	beq.n	80029cc <HAL_TIM_ConfigClockSource+0x8c>
 80029b0:	2b70      	cmp	r3, #112	; 0x70
 80029b2:	d804      	bhi.n	80029be <HAL_TIM_ConfigClockSource+0x7e>
 80029b4:	2b50      	cmp	r3, #80	; 0x50
 80029b6:	d033      	beq.n	8002a20 <HAL_TIM_ConfigClockSource+0xe0>
 80029b8:	2b60      	cmp	r3, #96	; 0x60
 80029ba:	d041      	beq.n	8002a40 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80029bc:	e06a      	b.n	8002a94 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80029be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029c2:	d066      	beq.n	8002a92 <HAL_TIM_ConfigClockSource+0x152>
 80029c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029c8:	d017      	beq.n	80029fa <HAL_TIM_ConfigClockSource+0xba>
      break;
 80029ca:	e063      	b.n	8002a94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6818      	ldr	r0, [r3, #0]
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	6899      	ldr	r1, [r3, #8]
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685a      	ldr	r2, [r3, #4]
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	f000 f994 	bl	8002d08 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80029ee:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	609a      	str	r2, [r3, #8]
      break;
 80029f8:	e04c      	b.n	8002a94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6818      	ldr	r0, [r3, #0]
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	6899      	ldr	r1, [r3, #8]
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685a      	ldr	r2, [r3, #4]
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	f000 f97d 	bl	8002d08 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a1c:	609a      	str	r2, [r3, #8]
      break;
 8002a1e:	e039      	b.n	8002a94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6818      	ldr	r0, [r3, #0]
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	6859      	ldr	r1, [r3, #4]
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	f000 f8f1 	bl	8002c14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2150      	movs	r1, #80	; 0x50
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f000 f94a 	bl	8002cd2 <TIM_ITRx_SetConfig>
      break;
 8002a3e:	e029      	b.n	8002a94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6818      	ldr	r0, [r3, #0]
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	6859      	ldr	r1, [r3, #4]
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	f000 f910 	bl	8002c72 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2160      	movs	r1, #96	; 0x60
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f000 f93a 	bl	8002cd2 <TIM_ITRx_SetConfig>
      break;
 8002a5e:	e019      	b.n	8002a94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6818      	ldr	r0, [r3, #0]
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	6859      	ldr	r1, [r3, #4]
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	f000 f8d1 	bl	8002c14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2140      	movs	r1, #64	; 0x40
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f000 f92a 	bl	8002cd2 <TIM_ITRx_SetConfig>
      break;
 8002a7e:	e009      	b.n	8002a94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4610      	mov	r0, r2
 8002a8c:	f000 f921 	bl	8002cd2 <TIM_ITRx_SetConfig>
      break;
 8002a90:	e000      	b.n	8002a94 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002a92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b083      	sub	sp, #12
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002ab6:	bf00      	nop
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b083      	sub	sp, #12
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b083      	sub	sp, #12
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ade:	bf00      	nop
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002aea:	b480      	push	{r7}
 8002aec:	b083      	sub	sp, #12
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002af2:	bf00      	nop
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b083      	sub	sp, #12
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b06:	bf00      	nop
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
	...

08002b14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4a34      	ldr	r2, [pc, #208]	; (8002bf8 <TIM_Base_SetConfig+0xe4>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d00f      	beq.n	8002b4c <TIM_Base_SetConfig+0x38>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b32:	d00b      	beq.n	8002b4c <TIM_Base_SetConfig+0x38>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a31      	ldr	r2, [pc, #196]	; (8002bfc <TIM_Base_SetConfig+0xe8>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d007      	beq.n	8002b4c <TIM_Base_SetConfig+0x38>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	4a30      	ldr	r2, [pc, #192]	; (8002c00 <TIM_Base_SetConfig+0xec>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d003      	beq.n	8002b4c <TIM_Base_SetConfig+0x38>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4a2f      	ldr	r2, [pc, #188]	; (8002c04 <TIM_Base_SetConfig+0xf0>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d108      	bne.n	8002b5e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a25      	ldr	r2, [pc, #148]	; (8002bf8 <TIM_Base_SetConfig+0xe4>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d01b      	beq.n	8002b9e <TIM_Base_SetConfig+0x8a>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b6c:	d017      	beq.n	8002b9e <TIM_Base_SetConfig+0x8a>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a22      	ldr	r2, [pc, #136]	; (8002bfc <TIM_Base_SetConfig+0xe8>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d013      	beq.n	8002b9e <TIM_Base_SetConfig+0x8a>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a21      	ldr	r2, [pc, #132]	; (8002c00 <TIM_Base_SetConfig+0xec>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d00f      	beq.n	8002b9e <TIM_Base_SetConfig+0x8a>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a20      	ldr	r2, [pc, #128]	; (8002c04 <TIM_Base_SetConfig+0xf0>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d00b      	beq.n	8002b9e <TIM_Base_SetConfig+0x8a>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a1f      	ldr	r2, [pc, #124]	; (8002c08 <TIM_Base_SetConfig+0xf4>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d007      	beq.n	8002b9e <TIM_Base_SetConfig+0x8a>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a1e      	ldr	r2, [pc, #120]	; (8002c0c <TIM_Base_SetConfig+0xf8>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d003      	beq.n	8002b9e <TIM_Base_SetConfig+0x8a>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a1d      	ldr	r2, [pc, #116]	; (8002c10 <TIM_Base_SetConfig+0xfc>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d108      	bne.n	8002bb0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ba4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	68fa      	ldr	r2, [r7, #12]
 8002bc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a08      	ldr	r2, [pc, #32]	; (8002bf8 <TIM_Base_SetConfig+0xe4>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d103      	bne.n	8002be4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	691a      	ldr	r2, [r3, #16]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	615a      	str	r2, [r3, #20]
}
 8002bea:	bf00      	nop
 8002bec:	3714      	adds	r7, #20
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	40010000 	.word	0x40010000
 8002bfc:	40000400 	.word	0x40000400
 8002c00:	40000800 	.word	0x40000800
 8002c04:	40000c00 	.word	0x40000c00
 8002c08:	40014000 	.word	0x40014000
 8002c0c:	40014400 	.word	0x40014400
 8002c10:	40014800 	.word	0x40014800

08002c14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b087      	sub	sp, #28
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	f023 0201 	bic.w	r2, r3, #1
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	011b      	lsls	r3, r3, #4
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	f023 030a 	bic.w	r3, r3, #10
 8002c50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	621a      	str	r2, [r3, #32]
}
 8002c66:	bf00      	nop
 8002c68:	371c      	adds	r7, #28
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr

08002c72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b087      	sub	sp, #28
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	60f8      	str	r0, [r7, #12]
 8002c7a:	60b9      	str	r1, [r7, #8]
 8002c7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	f023 0210 	bic.w	r2, r3, #16
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6a1b      	ldr	r3, [r3, #32]
 8002c94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	031b      	lsls	r3, r3, #12
 8002ca2:	697a      	ldr	r2, [r7, #20]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002cae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	011b      	lsls	r3, r3, #4
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	621a      	str	r2, [r3, #32]
}
 8002cc6:	bf00      	nop
 8002cc8:	371c      	adds	r7, #28
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr

08002cd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b085      	sub	sp, #20
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
 8002cda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ce8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	f043 0307 	orr.w	r3, r3, #7
 8002cf4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	609a      	str	r2, [r3, #8]
}
 8002cfc:	bf00      	nop
 8002cfe:	3714      	adds	r7, #20
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b087      	sub	sp, #28
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
 8002d14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	021a      	lsls	r2, r3, #8
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	609a      	str	r2, [r3, #8]
}
 8002d3c:	bf00      	nop
 8002d3e:	371c      	adds	r7, #28
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b087      	sub	sp, #28
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	f003 031f 	and.w	r3, r3, #31
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6a1a      	ldr	r2, [r3, #32]
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	401a      	ands	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6a1a      	ldr	r2, [r3, #32]
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	f003 031f 	and.w	r3, r3, #31
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d80:	431a      	orrs	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	621a      	str	r2, [r3, #32]
}
 8002d86:	bf00      	nop
 8002d88:	371c      	adds	r7, #28
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
	...

08002d94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d101      	bne.n	8002dac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002da8:	2302      	movs	r3, #2
 8002daa:	e050      	b.n	8002e4e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2202      	movs	r2, #2
 8002db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a1c      	ldr	r2, [pc, #112]	; (8002e5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d018      	beq.n	8002e22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df8:	d013      	beq.n	8002e22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a18      	ldr	r2, [pc, #96]	; (8002e60 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d00e      	beq.n	8002e22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a16      	ldr	r2, [pc, #88]	; (8002e64 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d009      	beq.n	8002e22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a15      	ldr	r2, [pc, #84]	; (8002e68 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d004      	beq.n	8002e22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a13      	ldr	r2, [pc, #76]	; (8002e6c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d10c      	bne.n	8002e3c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	68ba      	ldr	r2, [r7, #8]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68ba      	ldr	r2, [r7, #8]
 8002e3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3714      	adds	r7, #20
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	40010000 	.word	0x40010000
 8002e60:	40000400 	.word	0x40000400
 8002e64:	40000800 	.word	0x40000800
 8002e68:	40000c00 	.word	0x40000c00
 8002e6c:	40014000 	.word	0x40014000

08002e70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <__libc_init_array>:
 8002e98:	b570      	push	{r4, r5, r6, lr}
 8002e9a:	4e0d      	ldr	r6, [pc, #52]	; (8002ed0 <__libc_init_array+0x38>)
 8002e9c:	4c0d      	ldr	r4, [pc, #52]	; (8002ed4 <__libc_init_array+0x3c>)
 8002e9e:	1ba4      	subs	r4, r4, r6
 8002ea0:	10a4      	asrs	r4, r4, #2
 8002ea2:	2500      	movs	r5, #0
 8002ea4:	42a5      	cmp	r5, r4
 8002ea6:	d109      	bne.n	8002ebc <__libc_init_array+0x24>
 8002ea8:	4e0b      	ldr	r6, [pc, #44]	; (8002ed8 <__libc_init_array+0x40>)
 8002eaa:	4c0c      	ldr	r4, [pc, #48]	; (8002edc <__libc_init_array+0x44>)
 8002eac:	f000 f820 	bl	8002ef0 <_init>
 8002eb0:	1ba4      	subs	r4, r4, r6
 8002eb2:	10a4      	asrs	r4, r4, #2
 8002eb4:	2500      	movs	r5, #0
 8002eb6:	42a5      	cmp	r5, r4
 8002eb8:	d105      	bne.n	8002ec6 <__libc_init_array+0x2e>
 8002eba:	bd70      	pop	{r4, r5, r6, pc}
 8002ebc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ec0:	4798      	blx	r3
 8002ec2:	3501      	adds	r5, #1
 8002ec4:	e7ee      	b.n	8002ea4 <__libc_init_array+0xc>
 8002ec6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002eca:	4798      	blx	r3
 8002ecc:	3501      	adds	r5, #1
 8002ece:	e7f2      	b.n	8002eb6 <__libc_init_array+0x1e>
 8002ed0:	08002f34 	.word	0x08002f34
 8002ed4:	08002f34 	.word	0x08002f34
 8002ed8:	08002f34 	.word	0x08002f34
 8002edc:	08002f3c 	.word	0x08002f3c

08002ee0 <memset>:
 8002ee0:	4402      	add	r2, r0
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d100      	bne.n	8002eea <memset+0xa>
 8002ee8:	4770      	bx	lr
 8002eea:	f803 1b01 	strb.w	r1, [r3], #1
 8002eee:	e7f9      	b.n	8002ee4 <memset+0x4>

08002ef0 <_init>:
 8002ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ef2:	bf00      	nop
 8002ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ef6:	bc08      	pop	{r3}
 8002ef8:	469e      	mov	lr, r3
 8002efa:	4770      	bx	lr

08002efc <_fini>:
 8002efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002efe:	bf00      	nop
 8002f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f02:	bc08      	pop	{r3}
 8002f04:	469e      	mov	lr, r3
 8002f06:	4770      	bx	lr
